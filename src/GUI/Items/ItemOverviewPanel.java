/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Items;

import Controller.DateFormater;
import Data.Player;
import static Data.Player.Calling.CLERIC;
import static Data.Player.Calling.MAGE;
import static Data.Player.Calling.ROGUE;
import static Data.Player.Calling.WARRIOR;
import static Data.Player.Spec.DD;
import static Data.Player.Spec.HEAL;
import static Data.Player.Spec.SUPPORT;
import static Data.Player.Spec.TANK;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import javax.swing.tree.DefaultMutableTreeNode;


/**
 *
 * @author Dirk
 */
public class ItemOverviewPanel extends javax.swing.JPanel {

    /**
     * Creates new form ItemPanel
     */
    public ItemOverviewPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        itemListScrollPane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        treeTypePanel = new javax.swing.JPanel();
        playerButton = new javax.swing.JToggleButton();
        itemButton = new javax.swing.JToggleButton();
        playerFilterPanel = new javax.swing.JPanel();
        specFilterLabel = new javax.swing.JLabel();
        roleFilterLabel = new javax.swing.JLabel();
        healToggleButton = new javax.swing.JToggleButton();
        supportToggleButton = new javax.swing.JToggleButton();
        warriorToggleButton = new javax.swing.JToggleButton();
        rougeToggleButton = new javax.swing.JToggleButton();
        clericToggleButton = new javax.swing.JToggleButton();
        mageToggleButton = new javax.swing.JToggleButton();
        tankToggleButton = new javax.swing.JToggleButton();
        ddToggleButton = new javax.swing.JToggleButton();
        itemFilterPanel = new javax.swing.JPanel();
        itemFilterScrollPane = new javax.swing.JScrollPane();
        itemFilter = new javax.swing.JTextArea();
        treeTypePanel1 = new javax.swing.JPanel();
        oldPlayerButton = new javax.swing.JToggleButton();

        setPreferredSize(new java.awt.Dimension(1151, 546));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Spieler");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item01 (1)");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item02 (1)");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item03 (1)");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item04 (1)");
        treeNode1.add(treeNode2);
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.setRootVisible(false);
        itemListScrollPane.setViewportView(tree);

        treeTypePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(playerButton);
        playerButton.setSelected(true);
        playerButton.setText("Spieler");

        buttonGroup1.add(itemButton);
        itemButton.setText("Gegenstände");

        javax.swing.GroupLayout treeTypePanelLayout = new javax.swing.GroupLayout(treeTypePanel);
        treeTypePanel.setLayout(treeTypePanelLayout);
        treeTypePanelLayout.setHorizontalGroup(
            treeTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treeTypePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(itemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        treeTypePanelLayout.setVerticalGroup(
            treeTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, treeTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(treeTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        playerFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spielerfilter"));
        playerFilterPanel.setPreferredSize(new java.awt.Dimension(369, 57));

        specFilterLabel.setText("Rollen:");

        roleFilterLabel.setText("Klassen:");

        healToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        healToggleButton.setSelected(true);
        healToggleButton.setText("Heiler");
        healToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        healToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        healToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));
        healToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                healToggleButtonMouseClicked(evt);
            }
        });

        supportToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        supportToggleButton.setSelected(true);
        supportToggleButton.setText("Support");
        supportToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        supportToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        supportToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));
        supportToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supportToggleButtonMouseClicked(evt);
            }
        });

        warriorToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        warriorToggleButton.setSelected(true);
        warriorToggleButton.setText("Krieger");
        warriorToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        warriorToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        warriorToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));

        rougeToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        rougeToggleButton.setSelected(true);
        rougeToggleButton.setText("Schurke");
        rougeToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        rougeToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        rougeToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));

        clericToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        clericToggleButton.setSelected(true);
        clericToggleButton.setText("Kleriker");
        clericToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        clericToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        clericToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));

        mageToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        mageToggleButton.setSelected(true);
        mageToggleButton.setText("Magier");
        mageToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        mageToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        mageToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));

        tankToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        tankToggleButton.setSelected(true);
        tankToggleButton.setText("Tank");
        tankToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        tankToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        tankToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));
        tankToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tankToggleButtonMouseClicked(evt);
            }
        });

        ddToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        ddToggleButton.setSelected(true);
        ddToggleButton.setText("DD");
        ddToggleButton.setMaximumSize(new java.awt.Dimension(73, 23));
        ddToggleButton.setMinimumSize(new java.awt.Dimension(73, 23));
        ddToggleButton.setPreferredSize(new java.awt.Dimension(73, 23));
        ddToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ddToggleButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout playerFilterPanelLayout = new javax.swing.GroupLayout(playerFilterPanel);
        playerFilterPanel.setLayout(playerFilterPanelLayout);
        playerFilterPanelLayout.setHorizontalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specFilterLabel)
                    .addComponent(roleFilterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerFilterPanelLayout.createSequentialGroup()
                        .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(playerFilterPanelLayout.createSequentialGroup()
                        .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rougeToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerFilterPanelLayout.setVerticalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specFilterLabel)
                    .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roleFilterLabel)
                    .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rougeToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        itemFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Gegenstandsfilter"));

        itemFilter.setColumns(20);
        itemFilter.setRows(5);
        itemFilterScrollPane.setViewportView(itemFilter);

        javax.swing.GroupLayout itemFilterPanelLayout = new javax.swing.GroupLayout(itemFilterPanel);
        itemFilterPanel.setLayout(itemFilterPanelLayout);
        itemFilterPanelLayout.setHorizontalGroup(
            itemFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(itemFilterScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        itemFilterPanelLayout.setVerticalGroup(
            itemFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(itemFilterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
        );

        treeTypePanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        oldPlayerButton.setText("alle Spieler");

        javax.swing.GroupLayout treeTypePanel1Layout = new javax.swing.GroupLayout(treeTypePanel1);
        treeTypePanel1.setLayout(treeTypePanel1Layout);
        treeTypePanel1Layout.setHorizontalGroup(
            treeTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treeTypePanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(oldPlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );
        treeTypePanel1Layout.setVerticalGroup(
            treeTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, treeTypePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oldPlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playerFilterPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(treeTypePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(treeTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(itemFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(treeTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(treeTypePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(itemListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void healToggleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healToggleButtonMouseClicked

    }//GEN-LAST:event_healToggleButtonMouseClicked

    private void supportToggleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supportToggleButtonMouseClicked

    }//GEN-LAST:event_supportToggleButtonMouseClicked

    private void tankToggleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tankToggleButtonMouseClicked

    }//GEN-LAST:event_tankToggleButtonMouseClicked

    private void ddToggleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ddToggleButtonMouseClicked

    }//GEN-LAST:event_ddToggleButtonMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JToggleButton clericToggleButton;
    private javax.swing.JToggleButton ddToggleButton;
    private javax.swing.JToggleButton healToggleButton;
    private javax.swing.JToggleButton itemButton;
    private javax.swing.JTextArea itemFilter;
    private javax.swing.JPanel itemFilterPanel;
    private javax.swing.JScrollPane itemFilterScrollPane;
    private javax.swing.JScrollPane itemListScrollPane;
    private javax.swing.JToggleButton mageToggleButton;
    private javax.swing.JToggleButton oldPlayerButton;
    private javax.swing.JToggleButton playerButton;
    private javax.swing.JPanel playerFilterPanel;
    private javax.swing.JLabel roleFilterLabel;
    private javax.swing.JToggleButton rougeToggleButton;
    private javax.swing.JLabel specFilterLabel;
    private javax.swing.JToggleButton supportToggleButton;
    private javax.swing.JToggleButton tankToggleButton;
    private javax.swing.JTree tree;
    private javax.swing.JPanel treeTypePanel;
    private javax.swing.JPanel treeTypePanel1;
    private javax.swing.JToggleButton warriorToggleButton;
    // End of variables declaration//GEN-END:variables

    
    public void addRefreshListener(ActionListener l){
            
        playerButton.addActionListener(l);
        itemButton.addActionListener(l);
        
        warriorToggleButton.addActionListener(l);
        rougeToggleButton.addActionListener(l);
        clericToggleButton.addActionListener(l);
        mageToggleButton.addActionListener(l);
        
        tankToggleButton.addActionListener(l);
        ddToggleButton.addActionListener(l);
        healToggleButton.addActionListener(l);
        supportToggleButton.addActionListener(l);
    }
    
    public void addFilterListener(KeyListener l){
        itemFilter.addKeyListener(l);
    }
    
    public void addAllPlayerListener(ActionListener l){
        oldPlayerButton.addActionListener(l);
    }
    
    public void addShowModeListener(ActionListener l){
        playerButton.addActionListener(l);
        itemButton.addActionListener(l);
    }
    
    public boolean getShowMode(){
        return itemButton.isSelected();
    }
    
    public void setContent(LinkedList<LinkedList<Object>> content){
        DefaultMutableTreeNode dmtn = new DefaultMutableTreeNode("");
        String[] itemFilterValues = getItemFilter();
        boolean[] memberFilter = {roleIsFiltered(),specIsFiltered()};
        HashMap<String,DefaultMutableTreeNode> map = new HashMap<>();
        
        for(LinkedList<Object> row: content){
            String outerName = (String) row.get(0);
            String innerName = (String) row.get(1);
            Integer count    = (Integer)row.get(2);
            Date date        = (Date)   row.get(3);
            Player member    = (Player) row.get(4);
            
            String itemName = outerName;
            if(outerName.equals(member.getName())){
                itemName = innerName;
            }
            if(askToShowView(member,memberFilter)&&checkItemName(itemName,itemFilterValues)){
                    DefaultMutableTreeNode child = new DefaultMutableTreeNode(innerName+" ("+count+"): "+DateFormater.raidDateFormat.format(date));
                    if(map.containsKey(outerName)){    
                        map.get(outerName).add(child);
                    }else{    
                        DefaultMutableTreeNode memberNode = new DefaultMutableTreeNode(outerName);
                        map.put(outerName, memberNode);
                        memberNode.add(child);
                    }

                }
        }
        
        String[] names = map.keySet().toArray(new String[map.size()]);
        Arrays.sort(names);
        for(String name : names){
            dmtn.add(map.get(name));
        }
        
        tree.setModel(new javax.swing.tree.DefaultTreeModel(dmtn));
        for(int i=0;i<tree.getRowCount();i++){
            tree.expandRow(i);
        }
        //tree.setRootVisible(false);
    }

    private String[] getItemFilter(){
        return itemFilter.getText().toLowerCase().split("\n");
    }
    private boolean checkItemName(String value, String[] filter){
        String low = value.toLowerCase();
        if(filter[0].equals("")){
            return true;
        }
        for(String row : filter){
            if(low.contains(row)){
                return true;
            }
        }
        return false;
    }
    
        private boolean roleIsFiltered(){
        boolean set;
        boolean result= true;
        set = (warriorToggleButton.isSelected());
        result= result&&(set==(rougeToggleButton.isSelected()));
        result= result&&(set==(mageToggleButton.isSelected()));
        result= result&&(set==(clericToggleButton.isSelected()));
        return !result;
    }
    
    private boolean specIsFiltered(){
        boolean set;
        boolean result = true;
        set = (tankToggleButton.isSelected());
        result= result&&(set==(ddToggleButton.isSelected()));
        result= result&&(set==(healToggleButton.isSelected()));
        result= result&&(set==(supportToggleButton.isSelected()));
        return !result;
    }
    
    private boolean askToShowView(Player member, boolean[] filterStates){
        boolean bool = true;
        if(filterStates[1]){
            switch(member.getSpecMain()){
                case TANK:
                    bool &= !tankToggleButton.isSelected();
                    break;
                case DD:
                    bool &= !ddToggleButton.isSelected();
                    break;
                case HEAL:
                    bool &= !healToggleButton.isSelected();
                    break;
                case SUPPORT:
                    bool &= !supportToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        if(filterStates[0]){
            switch(member.getCalling()){
                case WARRIOR:
                    bool &= !warriorToggleButton.isSelected();
                    break;
                case ROGUE:
                    bool &= !rougeToggleButton.isSelected();
                    break;
                case CLERIC:
                    bool &= !clericToggleButton.isSelected();
                    break;
                case MAGE:
                    bool &= !mageToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        return bool;

    }
}
