/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Raid;

import Data.*;
import Data.Player.*;
import java.awt.Color;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.util.LinkedList;
import javax.swing.JMenuItem;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * Panel im MetaPanel RaidPanel zum zuweisen der Teilnahme des Raids.
 * @author Dirk
 */
public class SelectPlayerPanel extends javax.swing.JPanel {

    /**
     * Konstruktor für SelectPlayerPanel
     */
    public SelectPlayerPanel() {
        initComponents();
        
        offTable.getRowSorter().toggleSortOrder(0);
        awayTable.getRowSorter().toggleSortOrder(0);
        thereTable.getRowSorter().toggleSortOrder(0);
        standbyTable.getRowSorter().toggleSortOrder(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerPopupMenu1 = new javax.swing.JPopupMenu();
        createPlayerButton1 = new javax.swing.JMenuItem();
        changePlayerButton1 = new javax.swing.JMenuItem();
        playerMenuSeperator1 = new javax.swing.JPopupMenu.Separator();
        removePlayerButton1 = new javax.swing.JMenuItem();
        playePopupMenu2 = new javax.swing.JPopupMenu();
        createPlayerButton2 = new javax.swing.JMenuItem();
        changePlayerButton2 = new javax.swing.JMenuItem();
        playerMenuSeparator2 = new javax.swing.JPopupMenu.Separator();
        removePlayerButton2 = new javax.swing.JMenuItem();
        playerPopupMenu3 = new javax.swing.JPopupMenu();
        createPlayerButton3 = new javax.swing.JMenuItem();
        changePlayerButton3 = new javax.swing.JMenuItem();
        playerMenuSeparator3 = new javax.swing.JPopupMenu.Separator();
        removePlayerButton3 = new javax.swing.JMenuItem();
        playerPopupMenu4 = new javax.swing.JPopupMenu();
        createPlayerButton4 = new javax.swing.JMenuItem();
        changePlayerButton4 = new javax.swing.JMenuItem();
        playerMenuSeparator4 = new javax.swing.JPopupMenu.Separator();
        removePlayerButton4 = new javax.swing.JMenuItem();
        tablePanel = new javax.swing.JPanel();
        offScrollPane = new javax.swing.JScrollPane();
        offTable = new javax.swing.JTable();
        offToAway = new javax.swing.JButton();
        offToThere = new javax.swing.JButton();
        offToStandby = new javax.swing.JButton();
        plCountOff = new javax.swing.JLabel();
        awayScrollPane = new javax.swing.JScrollPane();
        awayTable = new javax.swing.JTable();
        awayToOff = new javax.swing.JButton();
        awayToThere = new javax.swing.JButton();
        awayToStandby = new javax.swing.JButton();
        plCountAway = new javax.swing.JLabel();
        thereScrollPane = new javax.swing.JScrollPane();
        thereTable = new javax.swing.JTable();
        thereToOff = new javax.swing.JButton();
        thereToAway = new javax.swing.JButton();
        thereToStandby = new javax.swing.JButton();
        plCountThere = new javax.swing.JLabel();
        standbyScrollPane = new javax.swing.JScrollPane();
        standbyTable = new javax.swing.JTable();
        standbyToOff = new javax.swing.JButton();
        standbyToAway = new javax.swing.JButton();
        standbyToThere = new javax.swing.JButton();
        plCountErsatz = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        infoPanel = new javax.swing.JPanel();
        warriorCountLabel = new javax.swing.JLabel();
        rogueCountLabel = new javax.swing.JLabel();
        clericCountLabel = new javax.swing.JLabel();
        mageCountLabel = new javax.swing.JLabel();
        warriorLabel = new javax.swing.JLabel();
        rogueLabel = new javax.swing.JLabel();
        clericLabel = new javax.swing.JLabel();
        mageLabel = new javax.swing.JLabel();
        allLabel = new javax.swing.JLabel();
        allCountLabel = new javax.swing.JLabel();
        infoSeparator = new javax.swing.JSeparator();
        playerFilterPanel = new javax.swing.JPanel();
        healToggleButton = new javax.swing.JToggleButton();
        supportToggleButton = new javax.swing.JToggleButton();
        warriorToggleButton = new javax.swing.JToggleButton();
        rogueToggleButton = new javax.swing.JToggleButton();
        clericToggleButton = new javax.swing.JToggleButton();
        mageToggleButton = new javax.swing.JToggleButton();
        tankToggleButton = new javax.swing.JToggleButton();
        ddToggleButton = new javax.swing.JToggleButton();
        filterSeparator = new javax.swing.JSeparator();

        createPlayerButton1.setText("Spieler hinzufügen");
        playerPopupMenu1.add(createPlayerButton1);

        changePlayerButton1.setText("Spieler ändern");
        playerPopupMenu1.add(changePlayerButton1);
        playerPopupMenu1.add(playerMenuSeperator1);

        removePlayerButton1.setText("Spieler entfernen");
        removePlayerButton1.setToolTipText("");
        playerPopupMenu1.add(removePlayerButton1);

        createPlayerButton2.setText("Spieler hinzufügen");
        playePopupMenu2.add(createPlayerButton2);

        changePlayerButton2.setText("Spieler ändern");
        playePopupMenu2.add(changePlayerButton2);
        playePopupMenu2.add(playerMenuSeparator2);

        removePlayerButton2.setText("Spieler entfernen");
        removePlayerButton2.setToolTipText("");
        playePopupMenu2.add(removePlayerButton2);

        createPlayerButton3.setText("Spieler hinzufügen");
        playerPopupMenu3.add(createPlayerButton3);

        changePlayerButton3.setText("Spieler ändern");
        playerPopupMenu3.add(changePlayerButton3);
        playerPopupMenu3.add(playerMenuSeparator3);

        removePlayerButton3.setText("Spieler entfernen");
        removePlayerButton3.setToolTipText("");
        playerPopupMenu3.add(removePlayerButton3);

        createPlayerButton4.setText("Spieler hinzufügen");
        playerPopupMenu4.add(createPlayerButton4);

        changePlayerButton4.setText("Spieler ändern");
        playerPopupMenu4.add(changePlayerButton4);
        playerPopupMenu4.add(playerMenuSeparator4);

        removePlayerButton4.setText("Spieler entfernen");
        removePlayerButton4.setToolTipText("");
        playerPopupMenu4.add(removePlayerButton4);

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        offTable.setAutoCreateRowSorter(true);
        offTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        offTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Abgemeldet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        offTable.setToolTipText("ziehe Spieler in die passende Tabelle");
        offTable.setComponentPopupMenu(playerPopupMenu4);
        offTable.setDragEnabled(true);
        offTable.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        offTable.setMaximumSize(new java.awt.Dimension(130, 396));
        offTable.setMinimumSize(new java.awt.Dimension(130, 396));
        offTable.setPreferredSize(new java.awt.Dimension(130, 396));
        offTable.getTableHeader().setResizingAllowed(false);
        offTable.getTableHeader().setReorderingAllowed(false);
        offScrollPane.setViewportView(offTable);

        offToAway.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_right.png"))); // NOI18N
        offToAway.setToolTipText("Ausgewählte Spieler werden Teilnehmern hinzugefügt");
        offToAway.setMaximumSize(new java.awt.Dimension(30, 30));
        offToAway.setMinimumSize(new java.awt.Dimension(30, 30));
        offToAway.setPreferredSize(new java.awt.Dimension(30, 30));

        offToThere.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_skip_right.png"))); // NOI18N
        offToThere.setToolTipText("Ausgewählte Spieler werden Ersatzbank hinzugefügt");
        offToThere.setMaximumSize(new java.awt.Dimension(30, 30));
        offToThere.setMinimumSize(new java.awt.Dimension(30, 30));
        offToThere.setPreferredSize(new java.awt.Dimension(30, 30));

        offToStandby.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_skip_right.png"))); // NOI18N
        offToStandby.setToolTipText("Ausgewählte Spieler werden Ersatzbank hinzugefügt");
        offToStandby.setMaximumSize(new java.awt.Dimension(30, 30));
        offToStandby.setMinimumSize(new java.awt.Dimension(30, 30));
        offToStandby.setPreferredSize(new java.awt.Dimension(30, 30));

        plCountOff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        plCountOff.setText("0");

        awayTable.setAutoCreateRowSorter(true);
        awayTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        awayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Abwesend"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        awayTable.setToolTipText("ziehe Spieler in die passende Tabelle");
        awayTable.setComponentPopupMenu(playerPopupMenu3);
        awayTable.setDragEnabled(true);
        awayTable.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        awayTable.setMaximumSize(new java.awt.Dimension(130, 396));
        awayTable.setMinimumSize(new java.awt.Dimension(130, 396));
        awayTable.setPreferredSize(new java.awt.Dimension(130, 396));
        awayTable.getTableHeader().setResizingAllowed(false);
        awayTable.getTableHeader().setReorderingAllowed(false);
        awayScrollPane.setViewportView(awayTable);

        awayToOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_left.png"))); // NOI18N
        awayToOff.setToolTipText("Ausgewählte Spieler werden Abwesend hinzugefügt");
        awayToOff.setMaximumSize(new java.awt.Dimension(30, 30));
        awayToOff.setMinimumSize(new java.awt.Dimension(30, 30));
        awayToOff.setPreferredSize(new java.awt.Dimension(30, 30));

        awayToThere.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_right.png"))); // NOI18N
        awayToThere.setToolTipText("Ausgewählte Spieler werden Teilnehmern hinzugefügt");
        awayToThere.setMaximumSize(new java.awt.Dimension(30, 30));
        awayToThere.setMinimumSize(new java.awt.Dimension(30, 30));
        awayToThere.setPreferredSize(new java.awt.Dimension(30, 30));

        awayToStandby.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_skip_right.png"))); // NOI18N
        awayToStandby.setToolTipText("Ausgewählte Spieler werden Ersatzbank hinzugefügt");
        awayToStandby.setMaximumSize(new java.awt.Dimension(30, 30));
        awayToStandby.setMinimumSize(new java.awt.Dimension(30, 30));
        awayToStandby.setPreferredSize(new java.awt.Dimension(30, 30));

        plCountAway.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        plCountAway.setText("0");

        thereTable.setAutoCreateRowSorter(true);
        thereTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        thereTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Teilnehmer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        thereTable.setToolTipText("ziehe Spieler in die passende Tabelle");
        thereTable.setComponentPopupMenu(playerPopupMenu1);
        thereTable.setDragEnabled(true);
        thereTable.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        thereTable.setMaximumSize(new java.awt.Dimension(130, 396));
        thereTable.setMinimumSize(new java.awt.Dimension(130, 396));
        thereTable.setPreferredSize(new java.awt.Dimension(130, 396));
        thereTable.getTableHeader().setResizingAllowed(false);
        thereTable.getTableHeader().setReorderingAllowed(false);
        thereScrollPane.setViewportView(thereTable);

        thereToOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_skip_left.png"))); // NOI18N
        thereToOff.setToolTipText("Ausgewählte Spieler werden Abwesend hinzugefügt");
        thereToOff.setMaximumSize(new java.awt.Dimension(30, 30));
        thereToOff.setMinimumSize(new java.awt.Dimension(30, 30));
        thereToOff.setPreferredSize(new java.awt.Dimension(30, 30));

        thereToAway.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_left.png"))); // NOI18N
        thereToAway.setToolTipText("Ausgewählte Spieler werden Abwesend hinzugefügt");
        thereToAway.setMaximumSize(new java.awt.Dimension(30, 30));
        thereToAway.setMinimumSize(new java.awt.Dimension(30, 30));
        thereToAway.setPreferredSize(new java.awt.Dimension(30, 30));

        thereToStandby.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_right.png"))); // NOI18N
        thereToStandby.setToolTipText("Ausgewählte Spieler werden Ersatzbank hinzugefügt");
        thereToStandby.setMaximumSize(new java.awt.Dimension(30, 30));
        thereToStandby.setMinimumSize(new java.awt.Dimension(30, 30));
        thereToStandby.setPreferredSize(new java.awt.Dimension(30, 30));

        plCountThere.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        plCountThere.setText("0");

        standbyTable.setAutoCreateRowSorter(true);
        standbyTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        standbyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Ersatz"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        standbyTable.setToolTipText("ziehe Spieler in die passende Tabelle");
        standbyTable.setComponentPopupMenu(playePopupMenu2);
        standbyTable.setDragEnabled(true);
        standbyTable.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        standbyTable.setMaximumSize(new java.awt.Dimension(130, 396));
        standbyTable.setMinimumSize(new java.awt.Dimension(130, 396));
        standbyTable.setPreferredSize(new java.awt.Dimension(130, 396));
        standbyTable.getTableHeader().setResizingAllowed(false);
        standbyTable.getTableHeader().setReorderingAllowed(false);
        standbyScrollPane.setViewportView(standbyTable);

        standbyToOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_skip_left.png"))); // NOI18N
        standbyToOff.setToolTipText("Ausgewählte Spieler werden Abwesend hinzugefügt");
        standbyToOff.setMaximumSize(new java.awt.Dimension(30, 30));
        standbyToOff.setMinimumSize(new java.awt.Dimension(30, 30));
        standbyToOff.setPreferredSize(new java.awt.Dimension(30, 30));

        standbyToAway.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_skip_left.png"))); // NOI18N
        standbyToAway.setToolTipText("Ausgewählte Spieler werden Abwesend hinzugefügt");
        standbyToAway.setMaximumSize(new java.awt.Dimension(30, 30));
        standbyToAway.setMinimumSize(new java.awt.Dimension(30, 30));
        standbyToAway.setPreferredSize(new java.awt.Dimension(30, 30));

        standbyToThere.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Arrow/arrow_left.png"))); // NOI18N
        standbyToThere.setToolTipText("Ausgewählte Spieler werden Teilnehmern hinzugefügt");
        standbyToThere.setMaximumSize(new java.awt.Dimension(30, 30));
        standbyToThere.setMinimumSize(new java.awt.Dimension(30, 30));
        standbyToThere.setPreferredSize(new java.awt.Dimension(30, 30));

        plCountErsatz.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        plCountErsatz.setText("0");

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                        .addComponent(plCountOff, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(offToAway, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(offToThere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(offToStandby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(offScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(awayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(awayToOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plCountAway, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(awayToThere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(awayToStandby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(thereToOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thereToAway, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plCountThere, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thereToStandby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(standbyToOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(standbyToAway, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(standbyToThere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plCountErsatz, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(thereScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(standbyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {awayScrollPane, offScrollPane, standbyScrollPane, thereScrollPane});

        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(standbyScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(thereScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(awayScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(offScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(plCountAway, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(standbyToOff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(standbyToThere, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(standbyToAway, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plCountErsatz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(awayToThere, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(offToAway, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(offToThere, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(offToStandby, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(awayToOff, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(awayToStandby, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thereToOff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thereToAway, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thereToStandby, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plCountOff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plCountThere, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        tablePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {awayToOff, awayToStandby, awayToThere, offToAway, offToStandby, offToThere, standbyToAway, standbyToOff, standbyToThere, thereToAway, thereToOff, thereToStandby});

        progressBar.setBackground(new java.awt.Color(255, 255, 255));
        progressBar.setMaximum(20);
        progressBar.setValue(10);
        progressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        progressBar.setName(""); // NOI18N
        progressBar.setStringPainted(true);

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Anzahl:"));

        warriorCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warriorCountLabel.setText(" - ");

        rogueCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rogueCountLabel.setText(" - ");

        clericCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clericCountLabel.setText(" - ");

        mageCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mageCountLabel.setText(" - ");

        warriorLabel.setText("Krieger:");

        rogueLabel.setText("Schurken:");

        clericLabel.setText("Kleriker:");

        mageLabel.setText("Magier:");

        allLabel.setText("Gesamt:");

        allCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        allCountLabel.setText(" - ");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                .addComponent(allLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(clericLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(warriorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rogueLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(rogueCountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                .addComponent(clericCountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(warriorCountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(infoSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mageCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(warriorCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rogueCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clericCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mageCountLabel))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(warriorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rogueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clericLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mageLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(allCountLabel)
                    .addComponent(allLabel))
                .addContainerGap())
        );

        playerFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spielerfilter"));
        playerFilterPanel.setPreferredSize(new java.awt.Dimension(369, 57));

        healToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        healToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_heal_gray.png"))); // NOI18N
        healToggleButton.setToolTipText("zeige Heiler");
        healToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        healToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        healToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        healToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_heal.png"))); // NOI18N

        supportToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        supportToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_support_gray.png"))); // NOI18N
        supportToggleButton.setToolTipText("zeige Supporter");
        supportToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_support.png"))); // NOI18N

        warriorToggleButton.setBackground(Data.Player.getCallingColor(Calling.WARRIOR));
        warriorToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_warrior_gray.png"))); // NOI18N
        warriorToggleButton.setToolTipText("zeige Krieger");
        warriorToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_warrior.png"))); // NOI18N

        rogueToggleButton.setBackground(Data.Player.getCallingColor(Calling.ROGUE));
        rogueToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_rogue_gray.png"))); // NOI18N
        rogueToggleButton.setToolTipText("zeige Schurke");
        rogueToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_rogue.png"))); // NOI18N

        clericToggleButton.setBackground(Data.Player.getCallingColor(Calling.CLERIC));
        clericToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_cleric_gray.png"))); // NOI18N
        clericToggleButton.setToolTipText("zeige Kleriker");
        clericToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_cleric.png"))); // NOI18N

        mageToggleButton.setBackground(Data.Player.getCallingColor(Calling.MAGE));
        mageToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_mage_gray.png"))); // NOI18N
        mageToggleButton.setToolTipText("zeige Magier");
        mageToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_mage.png"))); // NOI18N

        tankToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        tankToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_tank_gray.png"))); // NOI18N
        tankToggleButton.setToolTipText("zeige Tank's");
        tankToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_tank.png"))); // NOI18N

        ddToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        ddToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_dd_gray.png"))); // NOI18N
        ddToggleButton.setToolTipText("zeige DD's");
        ddToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_dd.png"))); // NOI18N

        filterSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout playerFilterPanelLayout = new javax.swing.GroupLayout(playerFilterPanel);
        playerFilterPanel.setLayout(playerFilterPanelLayout);
        playerFilterPanelLayout.setHorizontalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rogueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        playerFilterPanelLayout.setVerticalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterSeparator)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerFilterPanelLayout.createSequentialGroup()
                        .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(playerFilterPanelLayout.createSequentialGroup()
                        .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rogueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allCountLabel;
    private javax.swing.JLabel allLabel;
    private javax.swing.JScrollPane awayScrollPane;
    private javax.swing.JTable awayTable;
    private javax.swing.JButton awayToOff;
    private javax.swing.JButton awayToStandby;
    private javax.swing.JButton awayToThere;
    private javax.swing.JMenuItem changePlayerButton1;
    private javax.swing.JMenuItem changePlayerButton2;
    private javax.swing.JMenuItem changePlayerButton3;
    private javax.swing.JMenuItem changePlayerButton4;
    private javax.swing.JLabel clericCountLabel;
    private javax.swing.JLabel clericLabel;
    private javax.swing.JToggleButton clericToggleButton;
    private javax.swing.JMenuItem createPlayerButton1;
    private javax.swing.JMenuItem createPlayerButton2;
    private javax.swing.JMenuItem createPlayerButton3;
    private javax.swing.JMenuItem createPlayerButton4;
    private javax.swing.JToggleButton ddToggleButton;
    private javax.swing.JSeparator filterSeparator;
    private javax.swing.JToggleButton healToggleButton;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JSeparator infoSeparator;
    private javax.swing.JLabel mageCountLabel;
    private javax.swing.JLabel mageLabel;
    private javax.swing.JToggleButton mageToggleButton;
    private javax.swing.JScrollPane offScrollPane;
    private javax.swing.JTable offTable;
    private javax.swing.JButton offToAway;
    private javax.swing.JButton offToStandby;
    private javax.swing.JButton offToThere;
    private javax.swing.JLabel plCountAway;
    private javax.swing.JLabel plCountErsatz;
    private javax.swing.JLabel plCountOff;
    private javax.swing.JLabel plCountThere;
    private javax.swing.JPopupMenu playePopupMenu2;
    private javax.swing.JPanel playerFilterPanel;
    private javax.swing.JPopupMenu.Separator playerMenuSeparator2;
    private javax.swing.JPopupMenu.Separator playerMenuSeparator3;
    private javax.swing.JPopupMenu.Separator playerMenuSeparator4;
    private javax.swing.JPopupMenu.Separator playerMenuSeperator1;
    private javax.swing.JPopupMenu playerPopupMenu1;
    private javax.swing.JPopupMenu playerPopupMenu3;
    private javax.swing.JPopupMenu playerPopupMenu4;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem removePlayerButton1;
    private javax.swing.JMenuItem removePlayerButton2;
    private javax.swing.JMenuItem removePlayerButton3;
    private javax.swing.JMenuItem removePlayerButton4;
    private javax.swing.JLabel rogueCountLabel;
    private javax.swing.JLabel rogueLabel;
    private javax.swing.JToggleButton rogueToggleButton;
    private javax.swing.JScrollPane standbyScrollPane;
    private javax.swing.JTable standbyTable;
    private javax.swing.JButton standbyToAway;
    private javax.swing.JButton standbyToOff;
    private javax.swing.JButton standbyToThere;
    private javax.swing.JToggleButton supportToggleButton;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JToggleButton tankToggleButton;
    private javax.swing.JScrollPane thereScrollPane;
    private javax.swing.JTable thereTable;
    private javax.swing.JButton thereToAway;
    private javax.swing.JButton thereToOff;
    private javax.swing.JButton thereToStandby;
    private javax.swing.JLabel warriorCountLabel;
    private javax.swing.JLabel warriorLabel;
    private javax.swing.JToggleButton warriorToggleButton;
    // End of variables declaration//GEN-END:variables


    public void addAToDCListener(MouseListener a) {
        awayTable.addMouseListener(a);
    }

    public void addAToOListener(ActionListener l) {
        awayToOff.addActionListener(l);
    }

    public void addAToSListener(ActionListener l) {
        awayToStandby.addActionListener(l);
    }
    
    public void addAToTListener(ActionListener l) {
        awayToThere.addActionListener(l);
    }
    
    /**
     * Setzt den DropTargetListener der Tabellen für das Drag&Drop fest.
     * @param dropTargetListener
     */
    public void addDropTargetListener(DropTargetListener dropTargetListener) {
        DropTarget dropTarget1 = new DropTarget (awayTable, dropTargetListener);
        DropTarget dropTarget2 = new DropTarget (thereTable, dropTargetListener);
        DropTarget dropTarget3 = new DropTarget (standbyTable, dropTargetListener);
        DropTarget dropTarget4 = new DropTarget (offTable, dropTargetListener);
    }

    public void addOToAListener(ActionListener l) {
        offToAway.addActionListener(l);
    }

    public void addOToDCListener(MouseListener a) {
        offTable.addMouseListener(a);
    }

    public void addOToSListener(ActionListener l) {
        offToStandby.addActionListener(l);
    }

    public void addOToTListener(ActionListener l) {
        offToThere.addActionListener(l);
    }
    
    public void addPlayerAddListener(ActionListener l) {
        createPlayerButton1.addActionListener(l);
        createPlayerButton2.addActionListener(l);
        createPlayerButton3.addActionListener(l);
        createPlayerButton4.addActionListener(l);
    }
    public void addPlayerEditListener(ActionListener l) {
        changePlayerButton1.addActionListener(l);
        changePlayerButton2.addActionListener(l);
        changePlayerButton3.addActionListener(l);
        changePlayerButton4.addActionListener(l);
    }
    public void addPlayerRemoveListener(ActionListener l) {
        removePlayerButton1.addActionListener(l);
        removePlayerButton2.addActionListener(l);
        removePlayerButton3.addActionListener(l);
        removePlayerButton4.addActionListener(l);
    }
    
    public void addRoleFilterListener(ActionListener l){
        warriorToggleButton.addActionListener(l);
        rogueToggleButton.addActionListener(l);
        clericToggleButton.addActionListener(l);
        mageToggleButton.addActionListener(l);
    }

    public void addSToAListener(ActionListener l) {
        standbyToAway.addActionListener(l);
    }

    public void addSToDCListener(MouseListener a) {
        standbyTable.addMouseListener(a);
    }

    public void addSToOListener(ActionListener l) {
        standbyToOff.addActionListener(l);
    }

    public void addSToTListener(ActionListener l) {
        standbyToThere.addActionListener(l);
    }
    
    public void addSpecFilterListener(ActionListener l){
        tankToggleButton.addActionListener(l);
        ddToggleButton.addActionListener(l);
        healToggleButton.addActionListener(l);
        supportToggleButton.addActionListener(l);
    }

    public void addTToAListener(ActionListener l) {
        thereToAway.addActionListener(l);
    }

    public void addTToDCListener(MouseListener a) {
        thereTable.addMouseListener(a);
    }
    
    public void addTToOListener(ActionListener l) {
        thereToOff.addActionListener(l);
    }

    public void addTToSListener(ActionListener l) {
        thereToStandby.addActionListener(l);
    }
    
    /**
     * Gibt zurück ob der Spieler angezeigt werden sollte, abhängig zu den
     * Filtereinstellungen.
     * @param player zu überprüfender Spieler
     * @param filterStates die Filtereinstellungen
     *          {sollen Specs gefiltert werden, sollen Klassen gefiltert werden}
     * @return
     */
    private boolean askToShowView(Player player, boolean[] filterStates){
        boolean bool = true;
        if(filterStates[1]){
            switch(player.getSpecMain()){
                case TANK:
                    bool &= tankToggleButton.isSelected();
                    break;
                case DD:
                    bool &= ddToggleButton.isSelected();
                    break;
                case HEAL:
                    bool &= healToggleButton.isSelected();
                    break;
                case SUPPORT:
                    bool &= supportToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        if(filterStates[0]){
            switch(player.getCalling()){
                case WARRIOR:
                    bool &= warriorToggleButton.isSelected();
                    break;
                case ROGUE:
                    bool &= rogueToggleButton.isSelected();
                    break;
                case CLERIC:
                    bool &= clericToggleButton.isSelected();
                    break;
                case MAGE:
                    bool &= mageToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        return bool;
    }
    
    /**
     * Gibt zurück, ob mindestens eine Klasse gefiltert werden soll.
     * @return soll eine Klasse gefiltert werden?
     */
    private boolean callingIsFiltered(){
        boolean set;
        boolean result= true;
        set = (warriorToggleButton.isSelected());
        result= result&&(set==(rogueToggleButton.isSelected()));
        result= result&&(set==(mageToggleButton.isSelected()));
        result= result&&(set==(clericToggleButton.isSelected()));
        return !result;
    }

    /**
     * Gibt zurück zu welchem Spielerstatus (RaidState) das JMenuItem gehört.
     * Wichtig für das PopupMenu.
     * @param jMenuItem Das zu vergleichende JMenuItem
     * @return RaisState des JMenuItem
     */
    public RaidState getMenuItemState(JMenuItem jMenuItem) {
        if(jMenuItem.equals(createPlayerButton1)||jMenuItem.equals(changePlayerButton1)||jMenuItem.equals(removePlayerButton1)){
            return RaidState.TEILG;
        }else if(jMenuItem.equals(createPlayerButton2)||jMenuItem.equals(changePlayerButton2)||jMenuItem.equals(removePlayerButton2)){
            return RaidState.ERSATZ;
        }else if(jMenuItem.equals(createPlayerButton3)||jMenuItem.equals(changePlayerButton3)||jMenuItem.equals(removePlayerButton3)){
            return RaidState.ABWESEND;
        }else if(jMenuItem.equals(createPlayerButton4)||jMenuItem.equals(changePlayerButton4)||jMenuItem.equals(removePlayerButton4)){
            return RaidState.ABGEMELDET;
        }else{
            return null;
        }
    }
    
    /**
     * Gibt die JTables mit den Spielern zurück.
     * (0): AWAY
     * (1): THERE
     * (2): STANDBY
     * (3): OFF
     * @return jTables
     */
    public JTable[] getPlayerLists(){
        JTable[] list = new JTable[4];
        list[0] = awayTable;
        list[1] = thereTable;
        list[2] = standbyTable;
        list[3] = offTable;
        
        return list;
        
    }

    /**
     * Gibt den ersten ausgewählten Spielernamen aus der Tabelle zurück,
     * welche zum übergebenen RaidState gehört.
     * @param state Raidstate der Tabelle
     * @return erster ausgewählter Spielername der Tabelle
     */
    public String getSelectedPlayerName(RaidState state) {
        int i;
        switch(state){
            case TEILG:
                i = thereTable.getSelectedRow();
                if(!(i>=0)){
                    return null;
                }
                return ((String)thereTable.getValueAt(i, 0));
            case ERSATZ:
                i = standbyTable.getSelectedRow();
                if(!(i>=0)){
                    return null;
                }
                return ((String)standbyTable.getValueAt(i, 0));
            case ABGEMELDET:
                i = offTable.getSelectedRow();
                if(!(i>=0)){
                    return null;
                }
                return ((String)offTable.getValueAt(i, 0));
            case ABWESEND:i = awayTable.getSelectedRow();
                if(!(i>=0)){
                    return null;
                }
                return ((String) awayTable.getValueAt(i, 0));
            default:
                return null;
        }
    }
    
    /**
     * Setzt die Anzeige der Klassenzählungen auf die übergebenen Werte.
     * @param values Zahlen der Klassenzählung.
     */
    public void setClassCounts(int[][] values){
        warriorCountLabel.setText(values[0][0]+"+"+values[1][0]);
        rogueCountLabel.setText(values[0][1]+"+"+values[1][1]);
        clericCountLabel.setText(values[0][2]+"+"+values[1][2]);
        mageCountLabel.setText(values[0][3]+"+"+values[1][3]);
        allCountLabel.setText((values[0][0]+values[0][1]+values[0][2]+values[0][3])+"+"+(values[1][0]+values[1][1]+values[1][2]+values[1][3]));
    }
    
    /**
     * Setzt den Inhalt des Panels mit den Daten des übergebenen Raids.
     * @param raid Raid dessen Daten angezeigt werden soll.
     */
    public void setContent(Raid raid){
        int[][] classCounts = new int[2][5];
        LinkedList<String> names = raid.getPlayersNames();
        int raider = 0;
        int standby = 0;
        DefaultTableModel table0Model = (DefaultTableModel)offTable.getModel();
        DefaultTableModel table1Model = (DefaultTableModel)awayTable.getModel();
        DefaultTableModel table2Model = (DefaultTableModel)thereTable.getModel();
        DefaultTableModel table3Model = (DefaultTableModel)standbyTable.getModel();

        while(table0Model.getRowCount()>0){
            table0Model.removeRow(0);
        }
        while(table1Model.getRowCount()>0){
            table1Model.removeRow(0);
        }
        while(table2Model.getRowCount()>0){
            table2Model.removeRow(0);
        }
        while(table3Model.getRowCount()>0){
            table3Model.removeRow(0);
        }
        boolean[] filterStates = {callingIsFiltered(),specIsFiltered()};
        int[] pC = {0,0,0,0};
        for(String name : names){
            Player player = raid.getPlayerByName(name);
            if(player.getState().equals(RaidState.TEILG)){
                switch(player.getCalling()){
                    case WARRIOR:
                        classCounts[0][0]++;
                        break;
                    case ROGUE:
                        classCounts[0][1]++;
                        break;
                    case CLERIC:
                        classCounts[0][2]++;
                        break;
                    case MAGE:
                        classCounts[0][3]++;
                        break;
                }
            }else if(player.getState().equals(RaidState.ERSATZ)){
                switch(player.getCalling()){
                    case WARRIOR:
                        classCounts[1][0]++;
                        break;
                    case ROGUE:
                        classCounts[1][1]++;
                        break;
                    case CLERIC:
                        classCounts[1][2]++;
                        break;
                    case MAGE:
                        classCounts[1][3]++;
                        break;
                }
            }
            String[] row = {player.getName()};
            switch(player.getState()){
                case TEILG: 
                    raider++;
                    if(askToShowView(player,filterStates)){
                        pC[0]++;
                        table2Model.addRow(row);
                    }
                    break;
                case ERSATZ: 
                    standby++;
                    if(askToShowView(player,filterStates)){
                        pC[1]++;
                        table3Model.addRow(row);
                    }
                    break;
                case ABWESEND: 
                    if(askToShowView(player,filterStates)){
                        pC[2]++;
                        table1Model.addRow(row);
                    }
                    break;
                case ABGEMELDET: 
                    if(askToShowView(player,filterStates)){
                        pC[3]++;
                        table0Model.addRow(row);
                    }
                    break;
                default:
                    break;
            }
        }
        setClassCounts(classCounts);
        plCountThere.setText("("+pC[0]+")");
        plCountErsatz.setText("("+pC[1]+")");
        plCountAway.setText("("+pC[2]+")");
        plCountOff.setText("("+pC[3]+")");
        
        progressBar.setValue(raider);
        progressBar.setString("( "+raider+" + "+standby+" )");
        
    }
    
    /**
     * Sperrt/entsperrt die Funktionen,welche die SKS-Liste beeinflussen,
     * abhängig vom übergebenen Wert.
     * @param bool sollen die Funktionen gesperrt werden
     */
    public void setEditable(boolean bool){
        awayTable.setEnabled(bool);
        thereTable.setEnabled(bool);
        standbyTable.setEnabled(bool);
        createPlayerButton1.setEnabled(bool);
        createPlayerButton2.setEnabled(bool);
        createPlayerButton3.setEnabled(bool);
        createPlayerButton4.setEnabled(bool);
        changePlayerButton1.setEnabled(bool);
        changePlayerButton2.setEnabled(bool);
        changePlayerButton3.setEnabled(bool);
        changePlayerButton4.setEnabled(bool);
        removePlayerButton1.setEnabled(bool);
        removePlayerButton2.setEnabled(bool);
        removePlayerButton3.setEnabled(bool);
        removePlayerButton4.setEnabled(bool);
    }
    
    /**
     * Setzt die CellRenderer der PlayerTabellen.
     * @param book Raidbuch
     */
    public void setRenderer(Book book){
        offTable.
           setDefaultRenderer( String.class , new PlayerCellRenderer(book) );
        awayTable.
           setDefaultRenderer( String.class , new PlayerCellRenderer(book) );
        thereTable.
           setDefaultRenderer( String.class , new PlayerCellRenderer(book) );
        standbyTable.
           setDefaultRenderer( String.class , new PlayerCellRenderer(book) );
    }
    
    /**
     * Gibt zurück, ob mindestens eine Rolle gefiltert werden soll.
     * Es wird nur die MainRolle gefiltert.
     * @return soll eine Rolle gefiltert werden?
     */
    private boolean specIsFiltered(){
        boolean set;
        boolean result = true;
        set = (tankToggleButton.isSelected());
        result= result&&(set==(ddToggleButton.isSelected()));
        result= result&&(set==(healToggleButton.isSelected()));
        result= result&&(set==(supportToggleButton.isSelected()));
        return !result;
    }

    /**
     * CellRenderer zum Hervorheben der Klassen.
     */
    class PlayerCellRenderer extends DefaultTableCellRenderer{
        Book book;
        public PlayerCellRenderer(Book book){
            super();
            this.book = book;
        }
        @Override
        public void setValue( Object value ){
            Raid raid = book.getActiveRaid();
            if(value instanceof String&&raid!=null){
                Player player = raid.getPlayerByName((String)value);
                if(player!= null){
                super.setValue(player.getName());
                    setForeground(Player.getCallingColor(player.getCalling()));
                }else{
                setForeground(Color.BLACK);
                super.setValue(value);
            }
            }else{
                setForeground(Color.BLACK);
                super.setValue(value);
            }
            
        }
    }
}
