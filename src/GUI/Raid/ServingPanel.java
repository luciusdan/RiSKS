/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Raid;

import Data.Loot;
import Data.Loot.LootState;
import Data.Player;
import Data.Player.Calling;
import Controller.DateFormater;
import static Data.Player.Calling.CLERIC;
import static Data.Player.Calling.MAGE;
import static Data.Player.Calling.ROGUE;
import static Data.Player.Calling.WARRIOR;
import Data.Player.Spec;
import static Data.Player.Spec.DD;
import static Data.Player.Spec.HEAL;
import static Data.Player.Spec.SUPPORT;
import static Data.Player.Spec.TANK;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import javax.swing.JTable;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * Panel im MetaPanel RaidPanel für die Lootvergabe.
 * @author Dirk
 */
public class ServingPanel extends javax.swing.JPanel {

    /**
     * Creates new form Loot
     */
    public ServingPanel() {
        initComponents();
        TableColumn col =lootTable.getColumnModel().getColumn(0);
        col.setPreferredWidth(65);
        col =lootTable.getColumnModel().getColumn(1);
        col.setPreferredWidth(190);
        col =lootTable.getColumnModel().getColumn(2);
        col.setPreferredWidth(65);
        col =lootTable.getColumnModel().getColumn(3);
        col.setPreferredWidth(40);
        
        playerTable.setDefaultRenderer( Object.class, new PlayerCellRenderer() );
        lootTable.setDefaultRenderer( Object.class, new LootCellRenderer() );
        col =playerTable.getColumnModel().getColumn(0);
        col.setMaxWidth(30);
        col.setResizable(false);
        col =playerTable.getColumnModel().getColumn(playerTable.getColumnCount()-2);
        col.setMaxWidth(30);
        col.setResizable(false);
        col =playerTable.getColumnModel().getColumn(playerTable.getColumnCount()-1);
        col.setMaxWidth(30);
        col.setResizable(false);
        lootTable.getRowSorter().toggleSortOrder(2);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lootPopupMenu = new javax.swing.JPopupMenu();
        lootDelMenuButton = new javax.swing.JMenuItem();
        playerPopupMenu = new javax.swing.JPopupMenu();
        createPlayerButton = new javax.swing.JMenuItem();
        changePlayerButton = new javax.swing.JMenuItem();
        playerMenuSeparator = new javax.swing.JPopupMenu.Separator();
        removePlayerButton = new javax.swing.JMenuItem();
        playerFilterPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        ddToggleButton = new javax.swing.JToggleButton();
        rogueToggleButton = new javax.swing.JToggleButton();
        tankToggleButton = new javax.swing.JToggleButton();
        healToggleButton = new javax.swing.JToggleButton();
        warriorToggleButton = new javax.swing.JToggleButton();
        supportToggleButton = new javax.swing.JToggleButton();
        clericToggleButton = new javax.swing.JToggleButton();
        mageToggleButton = new javax.swing.JToggleButton();
        countLabel = new javax.swing.JLabel();
        multiToggleButton = new javax.swing.JButton();
        tankMultiToggleButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lootTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        itemNameField = new javax.swing.JTextField();
        itemDateField = new javax.swing.JTextField();
        lootAddButton = new javax.swing.JButton();
        lootChangeButton = new javax.swing.JButton();
        lootDelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        timeButton = new javax.swing.JButton();

        lootDelMenuButton.setText("Loot löschen");
        lootPopupMenu.add(lootDelMenuButton);

        createPlayerButton.setText("Spieler hinzufügen");
        playerPopupMenu.add(createPlayerButton);

        changePlayerButton.setText("Spieler ändern");
        playerPopupMenu.add(changePlayerButton);
        playerPopupMenu.add(playerMenuSeparator);

        removePlayerButton.setText("Spieler entfernen");
        removePlayerButton.setToolTipText("");
        playerPopupMenu.add(removePlayerButton);

        playerFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spieler"));
        playerFilterPanel.setPreferredSize(new java.awt.Dimension(369, 57));

        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Name", "Klasse", "Main Rolle", "Second Rolle", "  /", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.setComponentPopupMenu(playerPopupMenu);
        playerTable.setFocusTraversalPolicyProvider(true);
        playerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(playerTable);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Spielerfilter"));

        ddToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        ddToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_dd_gray.png"))); // NOI18N
        ddToggleButton.setToolTipText("zeige DD's");
        ddToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_dd.png"))); // NOI18N

        rogueToggleButton.setBackground(Data.Player.getCallingColor(Calling.ROGUE));
        rogueToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_rogue_gray.png"))); // NOI18N
        rogueToggleButton.setToolTipText("zeige Schurken");
        rogueToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_rogue.png"))); // NOI18N

        tankToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        tankToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_tank_gray.png"))); // NOI18N
        tankToggleButton.setToolTipText("zeige Tank's");
        tankToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_tank.png"))); // NOI18N

        healToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        healToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_heal_gray.png"))); // NOI18N
        healToggleButton.setToolTipText("zeige Heiler");
        healToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        healToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        healToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        healToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_heal.png"))); // NOI18N

        warriorToggleButton.setBackground(Data.Player.getCallingColor(Calling.WARRIOR));
        warriorToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_warrior_gray.png"))); // NOI18N
        warriorToggleButton.setToolTipText("zeige Krieger");
        warriorToggleButton.setMaximumSize(new java.awt.Dimension(37, 37));
        warriorToggleButton.setMinimumSize(new java.awt.Dimension(37, 37));
        warriorToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_warrior.png"))); // NOI18N

        supportToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        supportToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_support_gray.png"))); // NOI18N
        supportToggleButton.setToolTipText("zeige Supporter");
        supportToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_support.png"))); // NOI18N

        clericToggleButton.setBackground(Data.Player.getCallingColor(Calling.CLERIC));
        clericToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_cleric_gray.png"))); // NOI18N
        clericToggleButton.setToolTipText("zeige Kleriker");
        clericToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_cleric.png"))); // NOI18N

        mageToggleButton.setBackground(Data.Player.getCallingColor(Calling.MAGE));
        mageToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_mage_gray.png"))); // NOI18N
        mageToggleButton.setToolTipText("zeige Magier");
        mageToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_mage.png"))); // NOI18N

        countLabel.setText("0/0");

        multiToggleButton.setBackground(new java.awt.Color(153, 180, 209));

        tankMultiToggleButton.setBackground(new java.awt.Color(153, 180, 209));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rogueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tankMultiToggleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(multiToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(countLabel)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(countLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rogueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(multiToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tankMultiToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout playerFilterPanelLayout = new javax.swing.GroupLayout(playerFilterPanel);
        playerFilterPanel.setLayout(playerFilterPanelLayout);
        playerFilterPanelLayout.setHorizontalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerFilterPanelLayout.setVerticalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Loot"));

        lootTable.setAutoCreateRowSorter(true);
        lootTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Item", "Uhrzeit", "SKS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lootTable.setComponentPopupMenu(lootPopupMenu);
        lootTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lootTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(lootTable);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ausgewählt:"));

        itemNameField.setText("ItemName");

        itemDateField.setText("Item Uhrzeit");
        itemDateField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                itemDateFieldMouseReleased(evt);
            }
        });
        itemDateField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemDateFieldKeyReleased(evt);
            }
        });

        lootAddButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Document-1-icon.png"))); // NOI18N
        lootAddButton.setToolTipText("");
        lootAddButton.setMaximumSize(new java.awt.Dimension(45, 45));
        lootAddButton.setMinimumSize(new java.awt.Dimension(45, 45));
        lootAddButton.setPreferredSize(new java.awt.Dimension(45, 45));

        lootChangeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Glyph/Glyph-Check.png"))); // NOI18N
        lootChangeButton.setMaximumSize(new java.awt.Dimension(65, 45));
        lootChangeButton.setMinimumSize(new java.awt.Dimension(65, 45));
        lootChangeButton.setPreferredSize(new java.awt.Dimension(65, 45));

        lootDelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Glyph/Glyph-Remove.png"))); // NOI18N
        lootDelButton.setMaximumSize(new java.awt.Dimension(65, 45));
        lootDelButton.setMinimumSize(new java.awt.Dimension(65, 45));
        lootDelButton.setPreferredSize(new java.awt.Dimension(65, 45));

        jLabel1.setText("Name des Gegenstands:");

        jLabel2.setText("Uhrzeit der Vergabe:");

        timeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Clock.png"))); // NOI18N
        timeButton.setMaximumSize(new java.awt.Dimension(45, 45));
        timeButton.setMinimumSize(new java.awt.Dimension(45, 45));
        timeButton.setPreferredSize(new java.awt.Dimension(45, 45));
        timeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(itemNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(itemDateField)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(lootChangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lootDelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lootAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(timeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lootDelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lootChangeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lootAddButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playerFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void timeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeButtonActionPerformed
        itemDateField.setText(DateFormater.lootDateFormat.format(new Date()));
        validateItemDate();
    }//GEN-LAST:event_timeButtonActionPerformed

    private void itemDateFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemDateFieldKeyReleased
        validateItemDate();
    }//GEN-LAST:event_itemDateFieldKeyReleased

    private void itemDateFieldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemDateFieldMouseReleased
        validateItemDate();
    }//GEN-LAST:event_itemDateFieldMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem changePlayerButton;
    private javax.swing.JToggleButton clericToggleButton;
    private javax.swing.JLabel countLabel;
    private javax.swing.JMenuItem createPlayerButton;
    private javax.swing.JToggleButton ddToggleButton;
    private javax.swing.JToggleButton healToggleButton;
    private javax.swing.JTextField itemDateField;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton lootAddButton;
    private javax.swing.JButton lootChangeButton;
    private javax.swing.JButton lootDelButton;
    private javax.swing.JMenuItem lootDelMenuButton;
    private javax.swing.JPopupMenu lootPopupMenu;
    private javax.swing.JTable lootTable;
    private javax.swing.JToggleButton mageToggleButton;
    private javax.swing.JButton multiToggleButton;
    private javax.swing.JPanel playerFilterPanel;
    private javax.swing.JPopupMenu.Separator playerMenuSeparator;
    private javax.swing.JPopupMenu playerPopupMenu;
    private javax.swing.JTable playerTable;
    private javax.swing.JMenuItem removePlayerButton;
    private javax.swing.JToggleButton rogueToggleButton;
    private javax.swing.JToggleButton supportToggleButton;
    private javax.swing.JButton tankMultiToggleButton;
    private javax.swing.JToggleButton tankToggleButton;
    private javax.swing.JButton timeButton;
    private javax.swing.JToggleButton warriorToggleButton;
    // End of variables declaration//GEN-END:variables

    public void addChangeLootListener(ActionListener l){
        lootChangeButton.addActionListener(l);
    }
    
    public void addCreateLootListener(ActionListener l){
        lootAddButton.addActionListener(l);
    }
    
    public void addLootNameListener(KeyListener l){
        itemNameField.addKeyListener(l);
    }
    
    public void addLootTableListener(ListSelectionListener l){
        lootTable.getSelectionModel().addListSelectionListener(l);
    }
    
    public void addLootTableMouseListener(MouseListener l){
        lootTable.addMouseListener(l);
    }

    public void addMultiSpecFilterListener(ActionListener l) {
        multiToggleButton.addActionListener(l);
    }

    public void addPlayerAddListener(ActionListener l) {
        createPlayerButton.addActionListener(l);
    }
    
    public void addPlayerEditListener(ActionListener l) {
        changePlayerButton.addActionListener(l);
    }
    
    public void addPlayerMouseListener(MouseListener l){
        warriorToggleButton.addMouseListener(l);
        rogueToggleButton.addMouseListener(l);
        clericToggleButton.addMouseListener(l);
        mageToggleButton.addMouseListener(l);
    }

    public void addPlayerRemoveListener(ActionListener l) {
        removePlayerButton.addActionListener(l);
    }
    
    public void addRemoveLootListener(ActionListener l){
        lootDelMenuButton.addActionListener(l);
        lootDelButton.addActionListener(l);
    }
    
    public void addRoleFilterListener(ActionListener l){
        warriorToggleButton.addActionListener(l);
        rogueToggleButton.addActionListener(l);
        clericToggleButton.addActionListener(l);
        mageToggleButton.addActionListener(l);
    }
    
    public void addSpecFilterListener(ActionListener l){
        tankToggleButton.addActionListener(l);
        ddToggleButton.addActionListener(l);
        healToggleButton.addActionListener(l);
        supportToggleButton.addActionListener(l);
    }
    
    public void addSpecFilterMultiListener(ActionListener l){
        multiToggleButton.addActionListener(l);
    }
    
    public void addSpecFilterTankMultiListener(ActionListener l){
        tankMultiToggleButton.addActionListener(l);
    }

    public void addTankMultiSpecFilterListener(ActionListener l) {
        tankMultiToggleButton.addActionListener(l);
    }
    
     /**
     * Gibt zurück ob der Spieler angezeigt werden sollte, abhängig zu den
     * Filtereinstellungen.
     * @param player zu überprüfender Spieler
     * @param filterStates die Filtereinstellungen
     *          {sollen Specs gefiltert werden, sollen Klassen gefiltert werden}
     * @return
     */
    private boolean askToShowView(Player player, boolean[] filterStates){
        boolean bool = true;
        if(filterStates[1]){
            switch(player.getSpecMain()){
                case TANK:
                    bool &= tankToggleButton.isSelected();
                    break;
                case DD:
                    bool &= ddToggleButton.isSelected();
                    break;
                case HEAL:
                    bool &= healToggleButton.isSelected();
                    break;
                case SUPPORT:
                    bool &= supportToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        if(filterStates[0]){
            switch(player.getCalling()){
                case WARRIOR:
                    bool &= warriorToggleButton.isSelected();
                    break;
                case ROGUE:
                    bool &= rogueToggleButton.isSelected();
                    break;
                case CLERIC:
                    bool &= clericToggleButton.isSelected();
                    break;
                case MAGE:
                    bool &= mageToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        return bool;
    }
    
    /**
     * Gibt zurück, ob mindestens eine Klasse gefiltert werden soll.
     * @return soll eine Klasse gefiltert werden?
     */
    private boolean callingIsFiltered(){
        boolean set;
        boolean result= true;
        set = (warriorToggleButton.isSelected());
        result= result&&(set==(rogueToggleButton.isSelected()));
        result= result&&(set==(mageToggleButton.isSelected()));
        result= result&&(set==(clericToggleButton.isSelected()));
        return !result;
    }
    
    /**
     * Hebt die Auswahl im Panel auf und setzt die Felder zurück.
     */
    public void clearSelectedItem(){
        itemNameField.setText("");
        itemDateField.setText(DateFormater.lootDateFormat.format(new Date()));
        validateItemDate();
        lootTable.clearSelection();
        playerTable.clearSelection();
    }
    
    /**
     * Gibt den Columnindex mit dem angegebenen Namen aus dem LootTable zuruck.
     * @param name Name des gesuchten Column
     * @return Index des gesuchten Column, falls nicht vorhanden -1
     */
    private int getLootColumnIndex(String name){
        if(name!=null){
            for(int i=0;i<lootTable.getColumnCount();i++){
                if(name.equals(lootTable.getColumnName(i))){
                    return i;
                }
            }
            return -1;
        }else{
            return -1;
        }
    }

    /**
     * Gibt das Datum des Ausgewählten Loots zurück.
     * @return Datum des Loots
     */
    public Date getLootDate() {
            try {
                return DateFormater.lootDateFormat.parse(itemDateField.getText());
            } catch (ParseException ex) {
                return null;
            }
        
    }
    
    /**
     * Gibt den Text des itemNameField zurück.
     * @returnText des itemNameField
     */
    public String getLootName(){
        return itemNameField.getText();
    }

    /**
     * Gibt eine HashMap zurück mit den Informationen
     * Date -> ist ein SKS-Item
     * @return Hashmap
     */
    public HashMap<Date, Boolean> getLootStateMap() {
        HashMap<Date, Boolean> map = new HashMap<>();
        int dateCol = getLootColumnIndex("Uhrzeit");
        int stateCol = getLootColumnIndex("SKS");
        for(int i=0;i<lootTable.getRowCount();i++){
            try {
                String str = (String)lootTable.getValueAt(i, dateCol);
                Date date = DateFormater.lootDateFormat.parse(str);
                map.put(date, (Boolean) lootTable.getValueAt(i, stateCol));
            } catch (ParseException ex) {
                //darf nicht vorkommen
            }
        }
        return map;
    }
    
    /**
     * Gibt den aus dem lootTable ausgewählten Loot als Datum zurück.
     * @return Datun des ausgewählter Loots.
     */
    public Date getSelectedLoot(){
            try {
                String string = (String) lootTable.getValueAt(lootTable.getSelectedRow(), 2);
                return DateFormater.lootDateFormat.parse(string);
            } catch (Exception ex) {
                return null;
            }
    }
    
    /**
     * Gibt den aus der playerTable ausgewählten Spieler zurück.
     * @return der ausgewählte Spieler
     */
    public String getSelectedPlayer(){
        int row = playerTable.getSelectedRow();
        if(row>=0){
            return (String) playerTable.getValueAt(playerTable.getSelectedRow(), 1);
        }else{
            return null;
        }
    }

    /**
     * Gibt den Namen des in playerTable ausgewählten Spielers wieder.
     * @return Name des ausgewählten Spielers.
     */
    public String getSelectedPlayerName() {
        JTable table = playerTable;
        int c = table.getColumn("Name").getModelIndex();
        int r = table.getSelectedRow();
        if(r>=0){
                return (String)table.getValueAt(r, c);
            }else{
                return null;
            }
    }

    /**
     * Implementierung des multiFilterButton.
     */
    public void multiFilterAction() {
        int a = ddToggleButton.isSelected()?1:0;
        a += healToggleButton.isSelected()?1:0;
        a += supportToggleButton.isSelected()?1:0;
        tankToggleButton.setSelected(false);
        ddToggleButton.setSelected(a<2);
        healToggleButton.setSelected(a<2);
        supportToggleButton.setSelected(a<2);
    }
    
    /**
     * Sperrt/entsperrt die Funktionen,welche die SKS-Liste beeinflussen,
     * abhängig vom übergebenen Wert.
     * @param bool sollen die Funktionen gesperrt werden
     */
    public void setEditable(boolean bool){
        createPlayerButton.setEnabled(bool);
        removePlayerButton.setEnabled(bool);
        changePlayerButton.setEnabled(bool);
        lootDelMenuButton.setEnabled(bool);
        playerTable.setEnabled(bool);
        
        lootAddButton.setEnabled(bool);
        lootDelButton.setEnabled(bool);
        timeButton.setEnabled(bool);
        itemDateField.setEnabled(bool);
    }
    
    /**
     * Füllt die Spalte der playerTable für die Itemanzahl mit den übergebenen
     * Daten aus der HashMap.
     * @param counts hashmap mit der Itemanzahl im bezug zu dem Spielernamen
     */
    public void setItemCounts(HashMap<String,Integer> counts){
        for(int i=0; i<playerTable.getRowCount();i++){
            String name = (String) playerTable.getValueAt(i, 1);
            if(counts!=null&&counts.containsKey(name)){
                double value = counts.get(name);
                playerTable.setValueAt(value, i, 5);
            }else{
                double value = 0;
                playerTable.setValueAt(value, i, 5);
            }
        }
    }
    
    /**
     * Füllt den lootTable mit den übergebenen Daten neu.
     * @param content Liste mit den neuen Loots.
     */
    public void setLootTable(LinkedList<Loot> content){
        lootTable.clearSelection();
        playerTable.clearSelection();
        DefaultTableModel tableModel = (DefaultTableModel)lootTable.getModel();
        Object[] newRow;

        //clear ----------------------------------------------------------------
        while(tableModel.getRowCount()>0){
            tableModel.removeRow(0);
        }
        //fill ----------------------------------------------------------------- 
        for(Loot loot : content){  
                //SpeilerName ItemName Datum
                newRow= new Object[4];
                newRow[0]= loot.getPlayer();
                newRow[1]= loot;
                newRow[2]= DateFormater.lootDateFormat.format(loot.getTimestamp());
                newRow[3]= loot.getState().equals(LootState.RAID);
                tableModel.addRow(newRow);
        } 
    }
    
    /**
     * Füllt den playerTable mit den übergebenen Daten neu.
     * @param content Liste mit den neuen Spielern.
     */
    public void setPlayerTable(LinkedList<Player> content){
        DefaultTableModel tableModel = (DefaultTableModel)playerTable.getModel();
        Object[] newRow;
        int count =1;
        //clear ----------------------------------------------------------------
        while(tableModel.getRowCount()>0){
            tableModel.removeRow(0);
        }
        //fill -----------------------------------------------------------------
        boolean[] filterStates = {callingIsFiltered(),specIsFiltered()};
        for(int i=0;i<content.size();i++){
            Player pl = content.get(i);
            if(askToShowView(pl,filterStates)){
                newRow= new Object[6];
                newRow[0]= count;
                count++;
                //name  klasse ms ss 
                newRow[1]= pl.getName();
                newRow[2]= Player.callingToString(pl.getCalling());
                newRow[3]= Player.specToString(pl.getSpecMain());
                String specString="";
                if(pl.getSpecsSecond()!=null&&pl.getSpecsSecond().size()>0){
                    Spec last = pl.getSpecsSecond().getLast();
                    for(Spec spec : pl.getSpecsSecond()){
                        specString+=Player.specToString(spec);
                        if(!last.equals(spec)){
                            specString+="|";
                        }
                    }
                }else{
                    specString ="-";
                }
                newRow[4]= specString;
                newRow[5]= 0;
                tableModel.addRow(newRow);
            }
        }
        //countLabel.setText(tableModel.getRowCount()+"/"+caderSize);
        String a = ((tableModel.getRowCount()<10)?"0":"")+tableModel.getRowCount();
        String b = ((content.size()<10)?"0":"")+content.size();
        countLabel.setText(a+"/"+b);
    }
    
    /**
     *
     * @param ItemName
     * @param playerName
     * @param lootDate
     */
    public void setSelectedItem(String ItemName, String playerName, Date lootDate){
        itemNameField.setText(ItemName);
        itemDateField.setText(DateFormater.lootDateFormat.format(lootDate));
        validateItemDate();
        setSelectedPlayer(playerName);
        //setSelectedItem(lootDate);
    }
    
    /**
     * Setzt den Ausgewählten Loot in lootTable.
     * @param date Datum des ausgewählten Loots.
     */
    public void setSelectedItem(Date date){
        if(date!=null){
            int sel =-1;
            DefaultTableModel dtm = (DefaultTableModel) lootTable.getModel();

            for(int i=0;i<lootTable.getRowCount();i++){
                String cell = (String) dtm.getValueAt(i, 2);
                String soll = DateFormater.lootDateFormat.format(date);
                if(cell.equals(soll)){
                    sel =i;
                    break;
                }
            }

            if(sel==-1||sel>lootTable.getRowCount()){
                lootTable.clearSelection();
            }else{
                lootTable.setRowSelectionInterval(sel, sel);
            }
        }else{
            lootTable.clearSelection();
        }
    }
    
    /**
     * Setzt den ausgewählten Spieler in playerTable
     * @param playerName name des zu auszuerwählenen Spielers
     */
    private void setSelectedPlayer(String playerName){
        int sel =-1;
        DefaultTableModel dtm = (DefaultTableModel) playerTable.getModel();
        
        for(int i=0;i<playerTable.getRowCount();i++){
            String cell = (String) dtm.getValueAt(i, 1);
            if(cell.equals(playerName)){
                sel =i;
                break;
            }
        }
        
        if(sel==-1||sel>playerTable.getRowCount()){
            playerTable.clearSelection();
        }else{
            playerTable.setRowSelectionInterval(sel, sel);
        }
    }
    
    /**
     * Gibt zurück, ob mindestens eine Rolle gefiltert werden soll.
     * Es wird nur die MainRolle gefiltert.
     * @return soll eine Rolle gefiltert werden?
     */
    private boolean specIsFiltered(){
        boolean set;
        boolean result = true;
        set = (tankToggleButton.isSelected());
        result= result&&(set==(ddToggleButton.isSelected()));
        result= result&&(set==(healToggleButton.isSelected()));
        result= result&&(set==(supportToggleButton.isSelected()));
        return !result;
    }

    /**
     * Implementierung des tankMultiFilterButton.
     */
    public void tankMultiFilterAction() {
        tankToggleButton.setSelected(!tankToggleButton.isSelected());
        ddToggleButton.setSelected(false);
        healToggleButton.setSelected(false);
        supportToggleButton.setSelected(false);
    }
    
    /**
     * Überprüft ob, das im itemDateField angegebene Datum korrekt ist
     * und färbt den Text gegebenfalls Grün oder Rot.
     */
    private void validateItemDate(){
            try {
            String pre = itemDateField.getText();
            Date date = DateFormater.lootDateFormat.parse(pre);
            String post = DateFormater.lootDateFormat.format(date);
            if(pre.equals(post)){
                itemDateField.setForeground(Color.green.darker());
            }else{  
                itemDateField.setForeground(Color.red);
            }
        } catch (ParseException ex) {
            itemDateField.setForeground(Color.red);  
        }
    }
    
    /**
     * CellRenderer zum Hervorheben der Klassen und ob der Loot nicht die
     * SKS-Liste beeinflusst.
     */
    class LootCellRenderer extends DefaultTableCellRenderer{
        @Override
        public void setValue( Object value ){
            if(value instanceof Player){
                Player player = (Player) value;
                super.setValue(player.getName());
                switch(player.getCalling()){
                    case WARRIOR:
                        setForeground(Player.getCallingColor(Calling.WARRIOR));
                        break;
                    case ROGUE:
                        setForeground(Player.getCallingColor(Calling.ROGUE));
                        break;
                    case CLERIC:
                        setForeground(Player.getCallingColor(Calling.CLERIC));
                        break;
                    case MAGE:
                        setForeground(Player.getCallingColor(Calling.MAGE));
                        break;
                    default:
                        setForeground(Color.BLACK);
                        break;
                }
            }else if(value instanceof Loot){
                Loot loot = (Loot) value;
                switch(loot.getState()){
                    case RAID:
                        setForeground(Color.BLACK);
                         break;
                    default:
                        setForeground(Color.cyan.darker());
                        break;
                }
                super.setValue(loot.getDescription());
            }else{
                setForeground(Color.BLACK);
                super.setValue(value);
            }
            
        }
    }
    
    /**
     * CellRenderer zum Hervorheben der Klassen und der ItemAnzahl.
     */
    class PlayerCellRenderer extends DefaultTableCellRenderer{
        @Override
        public void setValue( Object value ){
            if(value instanceof String){
                String str = (String) value;
                super.setValue(value);
                switch(str){
                    case "Krieger":
                        setForeground(Player.getCallingColor(Calling.WARRIOR));
                        break;
                    case "Schurke":
                        setForeground(Player.getCallingColor(Calling.ROGUE));
                        break;
                    case "Kleriker":
                        setForeground(Player.getCallingColor(Calling.CLERIC));
                        break;
                    case "Magier":
                        setForeground(Player.getCallingColor(Calling.MAGE));
                        break;
                    default:
                        setForeground(Color.BLACK);
                        break;
                }
            }else if(value instanceof Double){
                int i = ((Double) value).intValue();
                super.setValue(i);
                if(i==0){
                    setForeground(Color.LIGHT_GRAY);
                }else if(i>1){
                    setForeground(Color.RED);
                }else{
                    setForeground(Color.BLACK);
                }
            }else{
                setForeground(Color.BLACK);
                super.setValue(value);
            }
            
        }
    }
}
