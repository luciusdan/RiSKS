/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Raid;

import Data.Player;
import Data.Player.Calling;
import static Data.Player.Calling.*;
import Data.Player.Spec;
import static Data.Player.Spec.*;
import Data.Raid;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * Panel im MetaPanel RaidPanel zur Anzeige und Weitergabe der SKS-Liste.
 * @author Dirk
 */
public class SKSPanel extends javax.swing.JPanel { 

    /**
     * Konstruktor des SKSPanel
     */
    public SKSPanel() {
        initComponents();
        TableColumn col =playerTable.getColumnModel().getColumn(0);
        col.setMaxWidth(30);
        col.setResizable(false);
        playerTable.setDefaultRenderer( Object.class, new PlayerCellRenderer() );
        this.playerTable.getRowSorter().toggleSortOrder(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerPopupMenu = new javax.swing.JPopupMenu();
        createPlayerButton = new javax.swing.JMenuItem();
        changePlayerButton = new javax.swing.JMenuItem();
        menuSeperator = new javax.swing.JPopupMenu.Separator();
        removePlayerButton = new javax.swing.JMenuItem();
        tablePanel = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        playerFilterPanel = new javax.swing.JPanel();
        healToggleButton = new javax.swing.JToggleButton();
        supportToggleButton = new javax.swing.JToggleButton();
        warriorToggleButton = new javax.swing.JToggleButton();
        rogueToggleButton = new javax.swing.JToggleButton();
        clericToggleButton = new javax.swing.JToggleButton();
        mageToggleButton = new javax.swing.JToggleButton();
        tankToggleButton = new javax.swing.JToggleButton();
        ddToggleButton = new javax.swing.JToggleButton();
        printPanel = new javax.swing.JPanel();
        printPathButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        lootListButton = new javax.swing.JButton();

        createPlayerButton.setText("Spieler hinzufügen");
        playerPopupMenu.add(createPlayerButton);

        changePlayerButton.setText("Spieler ändern");
        playerPopupMenu.add(changePlayerButton);
        playerPopupMenu.add(menuSeperator);

        removePlayerButton.setText("Spieler entfernen");
        removePlayerButton.setToolTipText("");
        playerPopupMenu.add(removePlayerButton);

        playerTable.setAutoCreateRowSorter(true);
        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Name", "Klasse", "Main Rolle", "Second Rolle", "SKS-Raid's"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.setComponentPopupMenu(playerPopupMenu);
        playerTable.setFocusable(false);
        playerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playerTable.getTableHeader().setReorderingAllowed(false);
        tablePanel.setViewportView(playerTable);

        playerFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spielerfilter"));
        playerFilterPanel.setPreferredSize(new java.awt.Dimension(369, 57));

        healToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        healToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_heal_gray.png"))); // NOI18N
        healToggleButton.setToolTipText("zeige Heiler");
        healToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        healToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        healToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        healToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_heal.png"))); // NOI18N

        supportToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        supportToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_support_gray.png"))); // NOI18N
        supportToggleButton.setToolTipText("zeige Support's");
        supportToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        supportToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_support.png"))); // NOI18N

        warriorToggleButton.setBackground(Data.Player.getCallingColor(Calling.WARRIOR));
        warriorToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_warrior_gray.png"))); // NOI18N
        warriorToggleButton.setToolTipText("zeige Krieger");
        warriorToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        warriorToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_warrior.png"))); // NOI18N

        rogueToggleButton.setBackground(Data.Player.getCallingColor(Calling.ROGUE));
        rogueToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_rogue_gray.png"))); // NOI18N
        rogueToggleButton.setToolTipText("zeige Schurken");
        rogueToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        rogueToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_rogue.png"))); // NOI18N

        clericToggleButton.setBackground(Data.Player.getCallingColor(Calling.CLERIC));
        clericToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_cleric_gray.png"))); // NOI18N
        clericToggleButton.setToolTipText("zeige Kleriker");
        clericToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        clericToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_cleric.png"))); // NOI18N

        mageToggleButton.setBackground(Data.Player.getCallingColor(Calling.MAGE));
        mageToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_mage_gray.png"))); // NOI18N
        mageToggleButton.setToolTipText("zeige Magier");
        mageToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        mageToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Role/icon_mage.png"))); // NOI18N

        tankToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        tankToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_tank_gray.png"))); // NOI18N
        tankToggleButton.setToolTipText("zeige Tank's");
        tankToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        tankToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_tank.png"))); // NOI18N

        ddToggleButton.setBackground(new java.awt.Color(191, 205, 219));
        ddToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_dd_gray.png"))); // NOI18N
        ddToggleButton.setToolTipText("zeige DD's");
        ddToggleButton.setMaximumSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setMinimumSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setPreferredSize(new java.awt.Dimension(35, 35));
        ddToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Spec/icon_dd.png"))); // NOI18N

        javax.swing.GroupLayout playerFilterPanelLayout = new javax.swing.GroupLayout(playerFilterPanel);
        playerFilterPanel.setLayout(playerFilterPanelLayout);
        playerFilterPanelLayout.setHorizontalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        playerFilterPanelLayout.setVerticalGroup(
            playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFilterPanelLayout.createSequentialGroup()
                .addGroup(playerFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clericToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rogueToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warriorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mageToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ddToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(healToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supportToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tankToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        printPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        printPathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/PDF/My-Adobe-PDF-Files-icon.png"))); // NOI18N
        printPathButton.setToolTipText("PDF-Drucken");

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/PDF/Oficina-PDF-icon.png"))); // NOI18N
        printButton.setToolTipText("PDF-Drucken");

        lootListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/PDF/Document-2-icon.png"))); // NOI18N
        lootListButton.setToolTipText("Loot-Liste anzeigen");

        javax.swing.GroupLayout printPanelLayout = new javax.swing.GroupLayout(printPanel);
        printPanel.setLayout(printPanelLayout);
        printPanelLayout.setHorizontalGroup(
            printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printPanelLayout.createSequentialGroup()
                .addComponent(lootListButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(printButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printPathButton)
                .addGap(2, 2, 2))
        );
        printPanelLayout.setVerticalGroup(
            printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printPanelLayout.createSequentialGroup()
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(printPathButton)
                    .addComponent(printButton))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(lootListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addComponent(printPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePanel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(printPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem changePlayerButton;
    private javax.swing.JToggleButton clericToggleButton;
    private javax.swing.JMenuItem createPlayerButton;
    private javax.swing.JToggleButton ddToggleButton;
    private javax.swing.JToggleButton healToggleButton;
    private javax.swing.JButton lootListButton;
    private javax.swing.JToggleButton mageToggleButton;
    private javax.swing.JPopupMenu.Separator menuSeperator;
    private javax.swing.JPanel playerFilterPanel;
    private javax.swing.JPopupMenu playerPopupMenu;
    private javax.swing.JTable playerTable;
    private javax.swing.JButton printButton;
    private javax.swing.JPanel printPanel;
    private javax.swing.JButton printPathButton;
    private javax.swing.JMenuItem removePlayerButton;
    private javax.swing.JToggleButton rogueToggleButton;
    private javax.swing.JToggleButton supportToggleButton;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JToggleButton tankToggleButton;
    private javax.swing.JToggleButton warriorToggleButton;
    // End of variables declaration//GEN-END:variables

    public void addLootListListener(ActionListener l) {
        lootListButton.addActionListener(l);
    }
    
    public void addPlayerAddListener(ActionListener l) {
        createPlayerButton.addActionListener(l);
    }
    
    public void addPlayerEditListener(ActionListener l) {
        changePlayerButton.addActionListener(l);
    }

    public void addPlayerRemoveListener(ActionListener l) {
        removePlayerButton.addActionListener(l);
    }
    
    public void addPrintListener(ActionListener l) {
        printButton.addActionListener(l);
    }
    
    public void addPrintPathListener(ActionListener l){
        printPathButton.addActionListener(l);
    }
    
    public void addRoleFilterListener(ActionListener l){
        warriorToggleButton.addActionListener(l);
        rogueToggleButton.addActionListener(l);
        clericToggleButton.addActionListener(l);
        mageToggleButton.addActionListener(l);
    }
    
    public void addSpecFilterListener(ActionListener l){
        tankToggleButton.addActionListener(l);
        ddToggleButton.addActionListener(l);
        healToggleButton.addActionListener(l);
        supportToggleButton.addActionListener(l);
    }
    
    /**
     * Gibt zurück ob der Spieler angezeigt werden sollte, abhängig zu den
     * Filtereinstellungen.
     * @param player zu überprüfender Spieler
     * @param filterStates die Filtereinstellungen
     *          {sollen Specs gefiltert werden, sollen Klassen gefiltert werden}
     * @return
     */
    private boolean askToShowView(Player player, boolean[] filterStates){
        boolean bool = true;
        if(filterStates[1]){
            switch(player.getSpecMain()){
                case TANK:
                    bool &= tankToggleButton.isSelected();
                    break;
                case DD:
                    bool &= ddToggleButton.isSelected();
                    break;
                case HEAL:
                    bool &= healToggleButton.isSelected();
                    break;
                case SUPPORT:
                    bool &= supportToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }

        if(filterStates[0]){
            switch(player.getCalling()){
                case WARRIOR:
                    bool &= warriorToggleButton.isSelected();
                    break;
                case ROGUE:
                    bool &= rogueToggleButton.isSelected();
                    break;
                case CLERIC:
                    bool &= clericToggleButton.isSelected();
                    break;
                case MAGE:
                    bool &= mageToggleButton.isSelected();
                    break;
                default:
                    return false;
            }
        }
        return bool;
    }

    /**
     * Gibt zurück, ob mindestens eine Klasse gefiltert werden soll.
     * @return soll eine Klasse gefiltert werden?
     */
    private boolean callingIsFiltered(){
        boolean set;
        boolean result= true;
        set = (warriorToggleButton.isSelected());
        result= result&&(set==(rogueToggleButton.isSelected()));
        result= result&&(set==(mageToggleButton.isSelected()));
        result= result&&(set==(clericToggleButton.isSelected()));
        return !result;
    }

    /**
     * Gibt den in playerTable ausgewählten Spieler zurück
     * @return
     */
    public String getSelectedPlayerName() {
        JTable table = playerTable;
        int c = table.getColumn("Name").getModelIndex();
        int r = table.getSelectedRow();
        if(r>=0){
                return (String)table.getValueAt(r, c);
            }else{
                return null;
            }
    }
    
    /**
     * Setzt den Inhalt des Panels mit den Daten des übergebenen Raids.
     * @param raid Raid dessen Daten angezeigt werden soll.
     */
    public void setContent(Raid raid){
        LinkedList<Player> players = raid.getNextSKS();
        
        Object[] newRow;
        DefaultTableModel tableModel = (DefaultTableModel)playerTable.getModel();
        while(tableModel.getRowCount()>0){
            tableModel.removeRow(0);
        }
        boolean[] filterStates = {callingIsFiltered(),specIsFiltered()};
        for (int i=0;i<players.size();i++){
            Player player = players.get(i);
            if(askToShowView(player,filterStates)){
                newRow = new Object[6];
                newRow[0]= i+1;
                newRow[1]= player.getName();
                newRow[2]= player.getCallingString();
                newRow[3]= player.getSpecMainString();
                LinkedList<Spec> specs = player.getSpecsSecond();
                String specString="";
                for(int j=0; j<specs.size();j++){
                    specString+=Player.specToString(specs.get(j));
                    if(j<specs.size()-1){
                        specString+="|";
                    }
                }
                if(specs.size()==0){
                    specString ="-";
                }
                newRow[4] = specString;
                newRow[5]= player.getRaidCount()+(player.getState().equals(Player.RaidState.TEILG)?1:0);
                tableModel.addRow(newRow);
            }
        }
    }
    
    /**
     * Sperrt/entsperrt die Funktionen,welche die SKS-Liste beeinflussen,
     * abhängig vom übergebenen Wert.
     * @param bool sollen die Funktionen gesperrt werden
     */
    public void setEditable(boolean bool){
        createPlayerButton.setEnabled(bool);
        removePlayerButton.setEnabled(bool);
    }
    
    /**
     * Gibt zurück, ob mindestens eine Rolle gefiltert werden soll.
     * Es wird nur die MainRolle gefiltert.
     * @return soll eine Rolle gefiltert werden?
     */
    private boolean specIsFiltered(){
        boolean set;
        boolean result = true;
        set = (tankToggleButton.isSelected());
        result= result&&(set==(ddToggleButton.isSelected()));
        result= result&&(set==(healToggleButton.isSelected()));
        result= result&&(set==(supportToggleButton.isSelected()));
        return !result;
    }
    
    
    /**
     * CellRenderer zum Hervorheben der Klassen.
     */
    class PlayerCellRenderer extends DefaultTableCellRenderer{
        @Override
        public void setValue( Object value ){
            if(value instanceof String){
                String str = (String) value;
                super.setValue(value);
                switch(str){
                    case "Krieger":
                        setForeground(Player.getCallingColor(Calling.WARRIOR));
                        break;
                    case "Schurke":
                        setForeground(Player.getCallingColor(Calling.ROGUE));
                        break;
                    case "Kleriker":
                        setForeground(Player.getCallingColor(Calling.CLERIC));
                        break;
                    case "Magier":
                        setForeground(Player.getCallingColor(Calling.MAGE));
                        break;
                    default:
                        setForeground(Color.BLACK);
                        break;
                }
            }else{
                setForeground(Color.BLACK);
                super.setValue(value);
            }
            
        }
    }
}
