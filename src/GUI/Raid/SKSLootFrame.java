/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Raid;

import java.awt.event.ActionListener;
import java.awt.event.WindowListener;
import java.util.HashMap;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;


/**
 * Frame für einen vorgennerierten Forum Post.
 * In einem zusätlichen Tab werden die hier nötigen Weblinks eingetragen.
 * @author Dirk
 */
public class SKSLootFrame extends javax.swing.JFrame {

    /**
     * Konsturktor von SKSLootFrame
     */
    public SKSLootFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Logo/icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        postingPanel = new javax.swing.JPanel();
        postingLabelPanel = new javax.swing.JPanel();
        postingLabel = new javax.swing.JLabel();
        postingScrollPane = new javax.swing.JScrollPane();
        postingArea = new javax.swing.JTextArea();
        formatButton = new javax.swing.JToggleButton();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        tableLabelPanel = new javax.swing.JPanel();
        tableLabel = new javax.swing.JLabel();

        setTitle("SKS-Loot");
        setAlwaysOnTop(true);

        postingLabelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        postingLabel.setFont(new java.awt.Font("Vijaya", 1, 36)); // NOI18N
        postingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        postingLabel.setText("SKS-Loot");

        javax.swing.GroupLayout postingLabelPanelLayout = new javax.swing.GroupLayout(postingLabelPanel);
        postingLabelPanel.setLayout(postingLabelPanelLayout);
        postingLabelPanelLayout.setHorizontalGroup(
            postingLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(postingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        postingLabelPanelLayout.setVerticalGroup(
            postingLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, postingLabelPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(postingLabel))
        );

        postingArea.setEditable(false);
        postingArea.setColumns(20);
        postingArea.setRows(5);
        postingScrollPane.setViewportView(postingArea);

        formatButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        formatButton.setText("Simpel-Format");

        javax.swing.GroupLayout postingPanelLayout = new javax.swing.GroupLayout(postingPanel);
        postingPanel.setLayout(postingPanelLayout);
        postingPanelLayout.setHorizontalGroup(
            postingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(postingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
            .addGroup(postingPanelLayout.createSequentialGroup()
                .addComponent(postingLabelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatButton))
        );
        postingPanelLayout.setVerticalGroup(
            postingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(postingPanelLayout.createSequentialGroup()
                .addGroup(postingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(postingLabelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formatButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
        );

        tabbedPane.addTab("SkS-LootListe", postingPanel);

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Link"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCellSelectionEnabled(true);
        table.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(table);

        tableLabelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tableLabel.setFont(new java.awt.Font("Vijaya", 1, 36)); // NOI18N
        tableLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tableLabel.setText("Gegenstand-Weblinks");

        javax.swing.GroupLayout tableLabelPanelLayout = new javax.swing.GroupLayout(tableLabelPanel);
        tableLabelPanel.setLayout(tableLabelPanelLayout);
        tableLabelPanelLayout.setHorizontalGroup(
            tableLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        tableLabelPanelLayout.setVerticalGroup(
            tableLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableLabel)
        );

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
            .addComponent(tableLabelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                .addComponent(tableLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Gegenstand-Weblinks", tablePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton formatButton;
    private javax.swing.JTextArea postingArea;
    private javax.swing.JLabel postingLabel;
    private javax.swing.JPanel postingLabelPanel;
    private javax.swing.JPanel postingPanel;
    private javax.swing.JScrollPane postingScrollPane;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JPanel tableLabelPanel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables

    public void addChangeListener(ChangeListener l){
        tabbedPane.addChangeListener(l);
    }
    
    public void addFormatListener(ActionListener l) {
        formatButton.addActionListener(l);
    }
    
    public void addFrameListener(WindowListener l){
        this.addWindowListener(l);
    }
    
    /**
     * Gibt zurück ob der SimpleFormatButton gedrückt ist.
     * @return
     */
    public boolean getFormatButtonState(){
        return formatButton.isSelected();
    }

    /**
     * Gibt den Inhalt der Link-Tabelle als Hashmap wieder.
     * Key: Gegenstandsname -> Link
     * @return
     */
    public HashMap<String,String> getLinks(){
        HashMap<String,String> links = new HashMap<>();
        for(int i=0;i<table.getRowCount();i++){
            links.put((String)table.getValueAt(i, 0), (String)table.getValueAt(i, 1));
        }
        return links;
    }
    
    /**
     * Setzt die Link-Tabelle mit den aus der Hashmap übergebenen Daten.
     * Key: Gegenstandsname -> Link
     * @param linkMap Hashmap mit den Linkdaten.
     */
    public void setList(HashMap<String,String> linkMap){
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        while(dtm.getRowCount()>0){
            dtm.removeRow(0);
        }
        for(String key : linkMap.keySet()){
            String[] cont = {key, linkMap.get(key)};
            dtm.addRow(cont);
        }
    }
    
    /**
     * Setzt den Text des Postings mit dem übergebenen String.
     * @param content neues Posting
     */
    public void setText(String content){
        postingArea.setText(content);
    }
    
}
