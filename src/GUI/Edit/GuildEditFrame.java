/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Edit;

import java.awt.event.ActionListener;
import java.util.LinkedList;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * Frame zum ändern und erstellen von Gilden.
 * @author Dirk
 */
public class GuildEditFrame extends javax.swing.JFrame {

    /**
     * Konstruktor des GuildFrame
     */
    public GuildEditFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        TableColumn col =table.getColumnModel().getColumn(0);
        int size = 220;
        col.setPreferredWidth(size);
        col =table.getColumnModel().getColumn(1);
        size = 60;
        col.setPreferredWidth(size);
        col =table.getColumnModel().getColumn(2);
        col.setPreferredWidth(size);
        
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Logo/icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        guildlessPanel = new javax.swing.JPanel();
        guildlessAliveLabel = new javax.swing.JLabel();
        guildlessAllLabel = new javax.swing.JLabel();
        guildlessAliveLabel1 = new javax.swing.JLabel();
        guildlessAllLabel1 = new javax.swing.JLabel();
        guildPanel = new javax.swing.JPanel();
        guildScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        guildNamePanel = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();

        setTitle("Gilden");
        setResizable(false);

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Glyph/Glyph-Check.png"))); // NOI18N
        editButton.setToolTipText("Änderung bestätigen");

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Glyph/Glyph-Add-icon.png"))); // NOI18N
        addButton.setToolTipText("als neue Gilde hinzufügen");

        closeButton.setText("Schließen");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Glyph/Glyph-Remove.png"))); // NOI18N
        removeButton.setToolTipText("Gilde löscht sich automatisch, falls beim beenden kein Spieler mehr in dieser Gilde ist.");
        removeButton.setEnabled(false);

        guildlessPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Gildenlose Spieler:"));

        guildlessAliveLabel.setText("jLabel1");

        guildlessAllLabel.setText("jLabel1");

        guildlessAliveLabel1.setText("Aktive:");

        guildlessAllLabel1.setText("Gesamt:");

        javax.swing.GroupLayout guildlessPanelLayout = new javax.swing.GroupLayout(guildlessPanel);
        guildlessPanel.setLayout(guildlessPanelLayout);
        guildlessPanelLayout.setHorizontalGroup(
            guildlessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guildlessPanelLayout.createSequentialGroup()
                .addGroup(guildlessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guildlessAliveLabel1)
                    .addComponent(guildlessAllLabel1))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(guildlessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guildlessAliveLabel)
                    .addComponent(guildlessAllLabel)))
        );
        guildlessPanelLayout.setVerticalGroup(
            guildlessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guildlessPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(guildlessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guildlessAliveLabel1)
                    .addComponent(guildlessAliveLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guildlessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guildlessAllLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(guildlessAllLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        guildPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Gilden:"));

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gilden Name", "Aktive", "Gesamt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        guildScrollPane.setViewportView(table);

        javax.swing.GroupLayout guildPanelLayout = new javax.swing.GroupLayout(guildPanel);
        guildPanel.setLayout(guildPanelLayout);
        guildPanelLayout.setHorizontalGroup(
            guildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(guildScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        guildPanelLayout.setVerticalGroup(
            guildPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(guildScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        guildNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Gildenname:"));

        javax.swing.GroupLayout guildNamePanelLayout = new javax.swing.GroupLayout(guildNamePanel);
        guildNamePanel.setLayout(guildNamePanelLayout);
        guildNamePanelLayout.setHorizontalGroup(
            guildNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );
        guildNamePanelLayout.setVerticalGroup(
            guildNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guildNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guildPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guildlessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(guildlessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(guildPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guildNamePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel guildNamePanel;
    private javax.swing.JPanel guildPanel;
    private javax.swing.JScrollPane guildScrollPane;
    private javax.swing.JLabel guildlessAliveLabel;
    private javax.swing.JLabel guildlessAliveLabel1;
    private javax.swing.JLabel guildlessAllLabel;
    private javax.swing.JLabel guildlessAllLabel1;
    private javax.swing.JPanel guildlessPanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void addAddListener(ActionListener l) {
        addButton.addActionListener(l);
    }

    public void addEditListener(ActionListener l) {
        editButton.addActionListener(l);
    }

    public void addRemoveListener(ActionListener l) {
        removeButton.addActionListener(l);
    }
    public void addTableListener(ListSelectionListener l){
        table.getSelectionModel().addListSelectionListener(l);
    }

    /**
     * Gibt den Inhalt des nameField zurück.
     * @return
     */
    public String getGuildName() {
        return nameField.getText();
    }
    
    /**
     * Gibt den ausgewählten Gildennamen zurück.
     * @return
     */
    public String getSelectedGuildName(){
        int row = table.getSelectedRow();
        if(row<0||row>=table.getRowCount()){
            return null;
        }
        return (String) table.getValueAt(row, 0);
    }
    
    /**
     * Setzt den Inhalt des Panels mit den übergebenen Daten.
     * @param datas 
     */
    public void setContent(LinkedList<Object[]> datas) {
        table.removeAll();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        
        for(Object[] data : datas){
            if(data.length==3){
                if(data[0] instanceof String && data[0].equals("-")){
                    guildlessAllLabel.setText(""+data[2]);
                    guildlessAliveLabel.setText(""+data[1]);
                }else{
                    tm.addRow(data);
                }
            }
        }
    }
    
    /**
     * Ändert den Text des nameField in den übergebenen String.
     * @param name
     */
    public void setGuildName(String name){
        nameField.setText(name);
    }
}
