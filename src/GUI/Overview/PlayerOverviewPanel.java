/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Overview;

import Controller.DateFormater;
import Data.Player;
import Data.Player.RaidState;
import Data.Player.RaidState.*;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.BorderFactory;
import javax.swing.JTable;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dirk
 */
public class PlayerOverviewPanel extends javax.swing.JPanel {

    Date wallDate;
    /**
     * Creates new form OverviewPanel
     */
    public PlayerOverviewPanel() {
        try {
            wallDate = DateFormater.raidDateFormat.parse("31.12.2013");
        } catch (ParseException ex) {
            wallDate = null;
        }
        initComponents();
        TableColumn col =playerTable.getColumnModel().getColumn(0);
        int size = 70;
        col.setPreferredWidth(size);
        col =playerTable.getColumnModel().getColumn(1);
        size = 110;
        col.setPreferredWidth(size);
        col =playerTable.getColumnModel().getColumn(2);
        size = 40;
        col.setPreferredWidth(size);
        col =playerTable.getColumnModel().getColumn(3);
        col.setPreferredWidth(size);
        col =playerTable.getColumnModel().getColumn(4);
        col.setPreferredWidth(size);
        playerDataTable.setDefaultRenderer( Object.class, new ColoredTableCellRenderer() );
        playerScrollPane.setVerticalScrollBar(playerDataScrollPane.getVerticalScrollBar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        createPlayerButton = new javax.swing.JMenuItem();
        changePlayerButton = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JPopupMenu.Separator();
        removePlayerButton = new javax.swing.JMenuItem();
        separator2 = new javax.swing.JPopupMenu.Separator();
        separator3 = new javax.swing.JPopupMenu.Separator();
        hideButton = new javax.swing.JCheckBoxMenuItem();
        percentButton = new javax.swing.JCheckBoxMenuItem();
        infoPanel = new javax.swing.JPanel();
        cl1 = new javax.swing.JLabel();
        cp1 = new javax.swing.JPanel();
        cl2 = new javax.swing.JLabel();
        cp2 = new javax.swing.JPanel();
        cl3 = new javax.swing.JLabel();
        cp3 = new javax.swing.JPanel();
        cl4 = new javax.swing.JLabel();
        cp4 = new javax.swing.JPanel();
        cl5 = new javax.swing.JLabel();
        cp5 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        playerDataScrollPane = new javax.swing.JScrollPane();
        playerDataTable = new javax.swing.JTable();
        playerScrollPane = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();

        createPlayerButton.setText("Spieler hinzufügen");
        popupMenu.add(createPlayerButton);

        changePlayerButton.setText("Spieler ändern");
        popupMenu.add(changePlayerButton);
        popupMenu.add(separator1);

        removePlayerButton.setText("Spieler entfernen");
        removePlayerButton.setToolTipText("");
        popupMenu.add(removePlayerButton);
        popupMenu.add(separator2);
        popupMenu.add(separator3);

        hideButton.setSelected(true);
        hideButton.setText("zeige nur Aktive Spieler");
        popupMenu.add(hideButton);

        percentButton.setSelected(true);
        percentButton.setText("in Prozent");
        popupMenu.add(percentButton);

        setPreferredSize(new java.awt.Dimension(1151, 546));

        infoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cl1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cl1.setText("Anwesend");

        cp1.setBackground(new java.awt.Color(255, 51, 0));

        javax.swing.GroupLayout cp1Layout = new javax.swing.GroupLayout(cp1);
        cp1.setLayout(cp1Layout);
        cp1Layout.setHorizontalGroup(
            cp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
        cp1Layout.setVerticalGroup(
            cp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cl2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cl2.setText("Ersatz");

        cp2.setBackground(new java.awt.Color(255, 51, 0));

        javax.swing.GroupLayout cp2Layout = new javax.swing.GroupLayout(cp2);
        cp2.setLayout(cp2Layout);
        cp2Layout.setHorizontalGroup(
            cp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
        cp2Layout.setVerticalGroup(
            cp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cl3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cl3.setText("Abgemeldet");

        cp3.setBackground(new java.awt.Color(255, 51, 0));

        javax.swing.GroupLayout cp3Layout = new javax.swing.GroupLayout(cp3);
        cp3.setLayout(cp3Layout);
        cp3Layout.setHorizontalGroup(
            cp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
        cp3Layout.setVerticalGroup(
            cp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cl4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cl4.setText("Abwesend");

        cp4.setBackground(new java.awt.Color(255, 51, 0));

        javax.swing.GroupLayout cp4Layout = new javax.swing.GroupLayout(cp4);
        cp4.setLayout(cp4Layout);
        cp4Layout.setHorizontalGroup(
            cp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
        cp4Layout.setVerticalGroup(
            cp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cl5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cl5.setText("nicht im SKS");

        cp5.setBackground(new java.awt.Color(255, 51, 0));

        javax.swing.GroupLayout cp5Layout = new javax.swing.GroupLayout(cp5);
        cp5.setLayout(cp5Layout);
        cp5Layout.setHorizontalGroup(
            cp5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
        cp5Layout.setVerticalGroup(
            cp5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addComponent(cl1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cl2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cl3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cp3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cl4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cp4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cl5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cp5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(791, Short.MAX_VALUE))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cl5, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
            .addComponent(cl4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cl3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cl2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cp3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cp4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cp5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setDividerLocation(300);

        playerDataScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        playerDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        playerDataTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        playerDataTable.setCellSelectionEnabled(true);
        playerDataTable.setComponentPopupMenu(popupMenu);
        playerDataTable.setEnabled(false);
        playerDataTable.setSelectionBackground(new java.awt.Color(50, 153, 255));
        playerDataTable.getTableHeader().setReorderingAllowed(false);
        playerDataScrollPane.setViewportView(playerDataTable);

        jSplitPane1.setRightComponent(playerDataScrollPane);

        playerScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        playerScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        playerScrollPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                playerScrollPanePropertyChange(evt);
            }
        });

        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Gilde", "Anw.", "Ers.", "Abw."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        playerTable.setComponentPopupMenu(popupMenu);
        playerTable.getTableHeader().setReorderingAllowed(false);
        playerScrollPane.setViewportView(playerTable);

        jSplitPane1.setLeftComponent(playerScrollPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSplitPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void playerScrollPanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_playerScrollPanePropertyChange

    }//GEN-LAST:event_playerScrollPanePropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem changePlayerButton;
    private javax.swing.JLabel cl1;
    private javax.swing.JLabel cl2;
    private javax.swing.JLabel cl3;
    private javax.swing.JLabel cl4;
    private javax.swing.JLabel cl5;
    private javax.swing.JPanel cp1;
    private javax.swing.JPanel cp2;
    private javax.swing.JPanel cp3;
    private javax.swing.JPanel cp4;
    private javax.swing.JPanel cp5;
    private javax.swing.JMenuItem createPlayerButton;
    private javax.swing.JCheckBoxMenuItem hideButton;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JCheckBoxMenuItem percentButton;
    private javax.swing.JScrollPane playerDataScrollPane;
    private javax.swing.JTable playerDataTable;
    private javax.swing.JScrollPane playerScrollPane;
    private javax.swing.JTable playerTable;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem removePlayerButton;
    private javax.swing.JPopupMenu.Separator separator1;
    private javax.swing.JPopupMenu.Separator separator2;
    private javax.swing.JPopupMenu.Separator separator3;
    // End of variables declaration//GEN-END:variables
    
    public void addPercentListener(ActionListener l){
    this.percentButton.addActionListener(l);
    }
    
    public void addPlayerAddListener(ActionListener l) {
        createPlayerButton.addActionListener(l);
    }
    
    public void addPlayerEditListener(ActionListener l) {
        changePlayerButton.addActionListener(l);
    }

    public void addPlayerRemoveListener(ActionListener l) {
        removePlayerButton.addActionListener(l);
    }
    
    public void addPlayerTableListener(ListSelectionListener l){
        playerTable.getSelectionModel().addListSelectionListener(l);
    }
    
    public void addPopupListener(ActionListener l){
    hideButton.addActionListener(l);
    }

    /**
     * Gibt den ausgewählten Spielernamen wieder.
     * @return
     */
    public String getSelectedPlayerName() {
        JTable table = playerTable;
        int c = table.getColumn("Name").getModelIndex();
        int r = table.getSelectedRow();
        if(r>=0){
                return (String)table.getValueAt(r, c);
            }else{
                return null;
            }
    }
    
     /**
     * Setzt den Inhalt des Panels mit den übergebenen Daten.
     * @param in Daten für die Tabellen.
     * @param dates Raiddaten.
     */
    public void setContent(Object[] in, LinkedList<Date> dates) {
        Object[] content = in;//filterContent(datas, book);
        
        DefaultTableModel ptm = (DefaultTableModel) playerTable.getModel();
        while(ptm.getRowCount()>0){
            ptm.removeRow(0);
        }

        String[] col = new String[dates.size()];
        Color[][] data = new Color[content.length][col.length];
        int dateWall = col.length;
        for(int i=0;i<col.length;i++){
            Date date = dates.get(col.length-i-1);
            col[i] = DateFormater.simpleRaidDateFormat.format(date);
            if(wallDate!=null&&wallDate.before(date)){
                dateWall= i;
            }
        }
         for(int i=0;i<content.length;i++){
             Object[] iC = (Object[]) content[i];
             String name = (String) iC[0];
             String guild = (String) iC[1];
             Integer[] indizies = (Integer[]) iC[2];
             Player.RaidState[] states = (Player.RaidState[]) iC[3];
             
             Object[] infoRow  = new Object[5];
             
             infoRow[0] = name;
             infoRow[1] = guild;
             if(percentButton.getState()){
                 int max = indizies[0]+indizies[1]+indizies[2];
                 int per0 = (100*indizies[0]/max);
                 int per1 = (100*indizies[1]/max);
                 int per2 = (100*indizies[2]/max);
                 infoRow[2] = per0+"%";
                 infoRow[3] = per1+"%";
                 infoRow[4] = per2+"%";
             }else{
                 infoRow[2] = indizies[0]+"";
                 infoRow[3] = indizies[1]+"";
                 infoRow[4] = indizies[2]+"";
             }
             
             
             ptm.addRow(infoRow);
             cp1.setBackground(Color.GREEN);
             cp2.setBackground(Color.YELLOW);
             cp3.setBackground(Color.WHITE);
             cp4.setBackground(new Color(255,76,76));
             cp5.setBackground(Color.LIGHT_GRAY);
             
             for(int j=0;j<col.length;j++){
             //for(int j=col.length-1;j>=0;j--){
                 RaidState state = states[col.length-j-1];
                 if(j<=dateWall){
                 if(state!=null){
                     switch(states[col.length-j-1]){
                        case TEILG:
                            data[i][j]= Color.GREEN;
                            break;
                        case ERSATZ:
                            data[i][j]= Color.YELLOW;
                            break;
                        case ABGEMELDET:
                            data[i][j]= Color.WHITE;
                            break;
                        case ABWESEND:
                            data[i][j]= new Color(255,76,76);
                            break;
                        default:
                            data[i][j]= Color.LIGHT_GRAY;
                    }
                 }else{
                            data[i][j]= Color.LIGHT_GRAY;
                 }
                 }else{
                     if(state!=null){
                     switch(states[col.length-j-1]){
                        case TEILG:
                            data[i][j]= Color.GREEN;
                            break;
                        case ERSATZ:
                            data[i][j]= Color.YELLOW;
                            break;
                        case ABGEMELDET:
                            data[i][j]= Color.WHITE;
                            break;
                        case ABWESEND:
                            data[i][j]= Color.WHITE;
                            break;
                        default:
                            data[i][j]= Color.LIGHT_GRAY;
                    }
                 }else{
                            data[i][j]= Color.LIGHT_GRAY;
                 }
                 }
             }
             
        DefaultTableModel pdtm = new DefaultTableModel(data, col);
        playerDataTable.setModel(pdtm);
        }
        
        TableColumnModel tcm = playerDataTable.getColumnModel();
        for (int i=0; i<tcm.getColumnCount();i++){
            TableColumn tc =tcm.getColumn(i);
            tc.setPreferredWidth(50);
            
        }
    }
    
    /**
     * Sperrt/entsperrt die Funktionen,welche die SKS-Liste beeinflussen,
     * abhängig vom übergebenen Wert.
     * @param bool sollen die Funktionen gesperrt werden
     */
    public void setEditable(boolean bool){
        changePlayerButton.setEnabled(bool);
        removePlayerButton.setEnabled(bool);
    }
    
    /**
     * CellRenderer zum darstellen der Farben als Farbe.
     */
    class ColoredTableCellRenderer extends DefaultTableCellRenderer{
        @Override
        public void setValue( Object value ){
            if (value instanceof Color){
                Color color = (Color)value;
                this.setBorder(BorderFactory.createLineBorder(Color.gray));
                setBackground(color);
                setText("");
            }
            else{
                setBackground(Color.WHITE);
                super.setValue( value );
            }
        }
    }
}
