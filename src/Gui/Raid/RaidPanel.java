/*
 * RiftSKS ist ein Programm zum führen eines Raidkaders mit der Absicht
 * das SKS-Verfahren bei der Lootverteilung anzuwenden.
 * Copyright (C) 2013  Dirk Evers
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License,
 * or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */
package GUI.Raid;

import Controller.DateFormater;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.text.ParseException;
import java.util.Date;
import javax.swing.event.ChangeListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.Document;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Metapanel RaidPanel zum Darstellen der Raidinformationen.
 * @author Dirk
 */
public class RaidPanel extends javax.swing.JPanel {
    private static final Logger logger = LogManager.getRootLogger();
    UndoManager undoManager;

    /**
     * Konstruktor des RaidPanel
     */
    public RaidPanel() {
        initComponents();
        
        TableColumn col =raidTable.getColumnModel().getColumn(0);
        int size = 40;
        col.setPreferredWidth(size);
        col =raidTable.getColumnModel().getColumn(1);
        size = 200;
        col.setPreferredWidth(size);
        col =raidTable.getColumnModel().getColumn(3);
        size = 100;
        col.setPreferredWidth(size);

        tabs.add(new RaidEditPanel(),"Raid bearbeiten");
        tabs.add(new SelectPlayerPanel(), "Teilnehmer bearbeiten");
        tabs.add(new ServingPanel(), "Lootvergabe");
        tabs.add(new SKSPanel(), "SKS-Liste");
        tabs.setSelectedIndex(2);
        
        
        undoManager = new UndoManager();
        Document doc = commentArea.getDocument();
        undoManager.setLimit( 3000 );
        doc.addUndoableEditListener(new UndoableEditListener() {
    @Override
    public void undoableEditHappened(UndoableEditEvent e) {

        undoManager.addEdit(e.getEdit());

    }});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        commentPanel = new javax.swing.JPanel();
        commentScrollPane = new javax.swing.JScrollPane();
        commentArea = new javax.swing.JTextArea();
        raidScrollPane = new javax.swing.JScrollPane();
        raidTable = new javax.swing.JTable();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText("undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setText("redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(redoMenuItem);

        setPreferredSize(new java.awt.Dimension(1151, 546));

        commentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Kommentar"));

        commentScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        commentScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        commentArea.setColumns(20);
        commentArea.setLineWrap(true);
        commentArea.setRows(5);
        commentArea.setComponentPopupMenu(popupMenu);
        commentArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                commentAreaKeyPressed(evt);
            }
        });
        commentScrollPane.setViewportView(commentArea);

        javax.swing.GroupLayout commentPanelLayout = new javax.swing.GroupLayout(commentPanel);
        commentPanel.setLayout(commentPanelLayout);
        commentPanelLayout.setHorizontalGroup(
            commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
        );
        commentPanelLayout.setVerticalGroup(
            commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commentPanelLayout.createSequentialGroup()
                .addComponent(commentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );

        raidTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "EE", null, "01.01.13"},
                { new Integer(2), "FS", null, "02.02.13"},
                { new Integer(3), "EE", null, "03.03.13"},
                { new Integer(4), "FS", null, "04.04.13"}
            },
            new String [] {
                "", "Ort", "Spieler", "Datum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        raidTable.setToolTipText("Doppelklick zum Raid auswählen");
        raidTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        raidTable.setSelectionModel(new CustomListSelectionModel());
        raidTable.getTableHeader().setReorderingAllowed(false);
        raidTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                raidTableMouseClicked(evt);
            }
        });
        raidScrollPane.setViewportView(raidTable);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Workbook/sheet_sub.png"))); // NOI18N
        removeButton.setToolTipText("Raid entfernen");
        removeButton.setPreferredSize(new java.awt.Dimension(45, 40));

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/Images/Workbook/sheet_add.png"))); // NOI18N
        addButton.setToolTipText("Raid hinzufügen");
        addButton.setPreferredSize(new java.awt.Dimension(45, 40));

        tabs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(raidScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(commentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(raidScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tabs))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void raidTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_raidTableMouseClicked
            int index = raidTable.rowAtPoint(evt.getPoint());
            ((CustomListSelectionModel)raidTable.getSelectionModel()).setSelection(index);
    }//GEN-LAST:event_raidTableMouseClicked

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        try {
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
        } catch (CannotUndoException exp) {
        }
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        try {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        } catch (CannotUndoException exp) {
        }
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void commentAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commentAreaKeyPressed
        int c = evt.getKeyCode(); //TODO hier sollte nochmal strg z und strg y hin
        if(evt.isControlDown()){
            if(c==90){
                try {
                    if (undoManager.canUndo()) {
                        undoManager.undo();
                    }
                } catch (CannotUndoException exp) {
                }
            }else if(c==89){
                try {
                    if (undoManager.canRedo()) {
                        undoManager.redo();
                    }
                } catch (CannotUndoException exp) {
                }
            }
        }
    }//GEN-LAST:event_commentAreaKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea commentArea;
    private javax.swing.JPanel commentPanel;
    private javax.swing.JScrollPane commentScrollPane;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JScrollPane raidScrollPane;
    private javax.swing.JTable raidTable;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JButton removeButton;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables

    public void addCommentListener(KeyListener l) {
        commentArea.addKeyListener(l);
    }
    
    public void addCreateButtonListener(ActionListener l) {
        addButton.addActionListener(l);
    }

    public void addRemoveButtonListener(ActionListener l) {
        removeButton.addActionListener(l);
    }
    
    public void addSelectListener(MouseListener l) {
        raidTable.addMouseListener(l);
    }
    
    public void addSliderListener(ChangeListener l){
        tabs.addChangeListener(l);
    }
    
    /**
     * Gibt das LootPanel zurück.
     * @return
     */
    public ServingPanel getLootPanel(){
        return (ServingPanel) tabs.getComponent(2);
    }

    /**
     * Gibt das RaidEditPanel zurück.
     * @return
     */
    public RaidEditPanel getRaidEditPanel() {
        return (RaidEditPanel) tabs.getComponent(0);
    }
    
    /**
     * Gibt das SKSPanel zurück.
     * @return
     */
    public SKSPanel getSKSPanel(){
        return (SKSPanel) tabs.getComponent(3);
    }
    
    /**
     * Gibt das Datum des ausgewählten Raids zurück.
     * @return
     */
    public Date getSelect(){
        int row = raidTable.getSelectedRow();
        try {
            String val = (String) raidTable.getModel().getValueAt(row, 3);
            return(DateFormater.raidDateFormat.parse(val));
        } catch (ParseException ex) {
            logger.error("Fehler!: Kann Raid("+row+") aus RaidTable nicht entziffern!",ex);
            return null;
        }
    }
    
    /**
     * Gibt das SelectPlayerPanel zurück.
     * @return
     */
    public SelectPlayerPanel getSelectPlayerPanel(){
        return (SelectPlayerPanel) tabs.getComponent(1);
    }
      
    
    /**
     * Gibt den Index des ausgewählten Tabs zurück.
     * @return
     */
    public int getTab(){
        return tabs.getSelectedIndex();
    }  
    
    /**
     * Setzt den Inhalt des Panels mit den Daten des übergebenen Raids.
     * @param raid Raid dessen Daten angezeigt werden soll.
     */
    public void setContent(Date date, Object[][]datas, String comment){
        commentArea.setText(comment);
        undoManager.discardAllEdits();
        int sel = 0;
        DefaultTableModel tableModel = (DefaultTableModel)raidTable.getModel();
        
        while(tableModel.getRowCount()>0){
            tableModel.removeRow(0);
        }
        for(int i=0;i<datas.length;i++){
            Object[] newRow = new Object[4];
            newRow[0]= datas.length+1-(i+1);
            newRow[1]= datas[i][0];
            newRow[2]= datas[i][1];
            Date current = (Date)datas[i][2];
            if(current.equals(date)){
                sel = i;
            }
            newRow[3]= DateFormater.raidDateFormat.format(current);
            tableModel.addRow(newRow);
        }
        if(raidTable.getRowCount()>=sel){
            ((CustomListSelectionModel)raidTable.getSelectionModel()).setSelection(sel);
        }
    }
}
