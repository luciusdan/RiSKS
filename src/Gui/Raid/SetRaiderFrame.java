/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui.Raid;

import Data.Cader;
import Data.Raid;
import Data.Member;
import Data.Member.State;
import Data.Player.Role;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dirk
 */
public class SetRaiderFrame extends javax.swing.JFrame {
    RaidPanelAsParentInterface parentInterface;
    Cader cader;
    Raid raid;
    
    /**
     * Creates new form setRaider
     */
    public SetRaiderFrame(Cader cader, RaidPanelAsParentInterface parentInterface) {
        this.parentInterface = parentInterface;
        this.cader = cader;
        initComponents();
        raidTable.getRowSorter().toggleSortOrder(0);
        caderTable.getRowSorter().toggleSortOrder(0);
    }

    public void open(Raid raid){
        this.raid= raid;
        reshow();
        this.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        caderTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        raidTable = new javax.swing.JTable();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        filterCB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        caderTable.setAutoCreateRowSorter(true);
        caderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Test A"},
                {"Test B"},
                {"Test C"},
                {"Test D"}
            },
            new String [] {
                "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        caderTable.setColumnSelectionAllowed(true);
        caderTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(caderTable);

        raidTable.setAutoCreateRowSorter(true);
        raidTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Ersatzbank"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        raidTable.getTableHeader().setReorderingAllowed(false);
        raidTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                raidTableMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(raidTable);
        raidTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        add.setText(">>");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setText("<<");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        close.setText("Schliessen");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        filterCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Krieger", "Schurke", "Kleriker", "Magier", "ALLE" }));
        filterCB.setSelectedIndex(4);
        filterCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterCBItemStateChanged(evt);
            }
        });

        jLabel1.setText("Filter:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterCB, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(filterCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add)
                            .addComponent(remove))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(close, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(close)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        this.setVisible(false);
        parentInterface.drawMember();
        dispose();  
    }//GEN-LAST:event_closeActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        int[] row = caderTable.getSelectedRows();
        for(int j=0;j<row.length;j++){
                String val = (String)caderTable.getValueAt(row[j], 0);
                raid.getMemberByName(val).setState(State.TEILG);
                System.out.println("Set: "+val+" | "+raid.getMemberByName(val).getState());
            
        }
        
        reshow();
    }//GEN-LAST:event_addActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
    int[] row = raidTable.getSelectedRows();
    for(int i=0;i<row.length;i++){
        String val = (String)raidTable.getValueAt(row[i], 0);
        raid.getMemberByName(val).setState(State.ABWESEND);

    }
    reshow();
    }//GEN-LAST:event_removeActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        this.setVisible(false);
        parentInterface.drawMember();
        dispose();  
    }//GEN-LAST:event_formWindowStateChanged

    private void raidTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_raidTableMouseReleased
        for(int i=0;i<raidTable.getRowCount();i++){
            Member raider = raid.getMemberByName((String)raidTable.getValueAt(i, 0)) ;
            Boolean bool = (Boolean)raidTable.getValueAt(i, 1);
            if(bool!=raider.getState().equals(State.ERSATZ)){
                raider.setState(bool?State.ERSATZ:State.TEILG);
            }
        }
    }//GEN-LAST:event_raidTableMouseReleased

    private void filterCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterCBItemStateChanged
        reshow();
    }//GEN-LAST:event_filterCBItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTable caderTable;
    private javax.swing.JButton close;
    private javax.swing.JComboBox filterCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable raidTable;
    private javax.swing.JButton remove;
    // End of variables declaration//GEN-END:variables

    private Role getFilter(){
        switch(filterCB.getSelectedIndex()){
            case(0):
                return Role.WARRIOR;
            case(1):
                return Role.ROUGE;
            case(2):
                return Role.CLERIC;
            case(3):
                return Role.MAGE;
            default:
                return null;
        }
    }
    
    private void reshow(){
        Object[] newRow;
        DefaultTableModel raidModel = (DefaultTableModel)raidTable.getModel();
        DefaultTableModel caderModel = (DefaultTableModel)caderTable.getModel();
        Member currentRaider;
        while(caderModel.getRowCount()>0){
            caderModel.removeRow(0);
        }
        while(raidModel.getRowCount()>0){
            raidModel.removeRow(0);
        }
        String[] names= raid.getMembersNames();
        for(int i=0;i<names.length;i++){
            currentRaider = raid.getMemberByName(names[i]);
            Role filterRole = getFilter();
            Role role = currentRaider.getRole();
            if(filterRole==null||role.equals(filterRole)){
                if(currentRaider.getState().equals(State.ABWESEND)){
                    newRow = new Object[1];
                    newRow[0]= currentRaider.getName();
                    caderModel.addRow(newRow);
                }else{
                    newRow= new Object[2];
                    newRow[0]= currentRaider.getName();
                    newRow[1]= currentRaider.getState().equals(State.ERSATZ);
                    raidModel.addRow(newRow);
                }
            }
        }
    }
}
