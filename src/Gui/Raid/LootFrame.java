/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui.Raid;

import Data.Loot;
import Data.Member;
import Data.Raid;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Dirk
 */
public class LootFrame extends javax.swing.JFrame {
    RaidPanelAsParentInterface parentInterface;
    Raid raid;
    Loot loot;
    SimpleDateFormat lootDateFormat = new SimpleDateFormat("HH:mm:ss");
    
    /**
     * Creates new form setRaider
     */
    public LootFrame(RaidPanelAsParentInterface parentInterface) {
        this.parentInterface = parentInterface;
        initComponents();
    }

    public void open(Raid raid, Date timestamp){
        //commentArea.setFocusable(rootPaneCheckingEnabled);
        this.raid= raid;
        this.loot = raid.getLoot(timestamp);
        LinkedList<Member> members = raid.getFiltertMembersNames();
        memberCB.removeAllItems();
        for (int i=0;i<members.size();i++){
            String name = members.get(i).getName();
            memberCB.addItem(name);
            if(loot.getMember().getName().equals(name)){
                memberCB.setSelectedIndex(i);
            }
        }
        dateField.setText(lootDateFormat.format(timestamp));
        dateField.setForeground(Color.green.darker());
        commentArea.setText(loot.getName());
        this.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinField1 = new com.toedter.components.JSpinField();
        close = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();
        dateField = new javax.swing.JTextField();
        memberCB = new javax.swing.JComboBox();
        commentAreaScrollPane = new javax.swing.JScrollPane();
        commentArea = new javax.swing.JTextArea();

        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        close.setText("Schliessen");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        checkButton.setText("O.K.");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        dateField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateFieldKeyReleased(evt);
            }
        });

        commentArea.setColumns(20);
        commentArea.setRows(5);
        commentAreaScrollPane.setViewportView(commentArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(memberCB, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commentAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateField)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(memberCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(commentAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkButton)
                    .addComponent(close))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        this.setVisible(false);
        dispose();  
    }//GEN-LAST:event_closeActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        this.setVisible(false);
        dispose();  
    }//GEN-LAST:event_formWindowStateChanged

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        JFrame frame = new JFrame("ChangeDialog");

        if(dateField.getForeground().equals(Color.red)){
            JOptionPane.showMessageDialog(
                frame,
                "Das eingegebene Datum ist nicht G체ltig!\n"
                    + "Verwende: Stunde:Minuten:Sekunden (HH:MM:SS)",
                "Ung체ltiges Datum!",
                JOptionPane.ERROR_MESSAGE);
        }else{
            int n = JOptionPane.showConfirmDialog(
                frame,
                "Soll der Loot wirklich ge채ndert werden?\n"
                                + "Das kann Auswirkungen auf die ganze SKS haben!",
                "Loot 채ndern",
                JOptionPane.YES_NO_OPTION);
            if(n==0){
                try {
                    Date timestamp = lootDateFormat.parse(dateField.getText());
                    String name = commentArea.getText();
                    Member member = raid.getMemberByName((String)memberCB.getSelectedItem());
                    
                    raid.removeLoot(loot.getTimestamp());
                    loot.setMember(member);
                    loot.setName(name);
                    loot.setTimestamp(timestamp);
                    raid.addLoot(loot);
                    raid.recalcSKS();
                    parentInterface.drawLoot();
                    this.setVisible(false);
                    dispose();
                    } catch (ParseException ex) {
                        System.out.println("FEHLER: Dieser Zustand sollte nicht erreicht werden!");
                    }
            }
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void dateFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFieldKeyReleased
        try {
            String pre = dateField.getText();
            Date date = lootDateFormat.parse(pre);
            String post = lootDateFormat.format(date);
            if(pre.equals(post)){
                dateField.setForeground(Color.green.darker());
            }else{  
                dateField.setForeground(Color.red);
            }
        } catch (ParseException ex) {
            dateField.setForeground(Color.red);  
        }


    }//GEN-LAST:event_dateFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JButton close;
    private javax.swing.JTextArea commentArea;
    private javax.swing.JScrollPane commentAreaScrollPane;
    private javax.swing.JTextField dateField;
    private com.toedter.components.JSpinField jSpinField1;
    private javax.swing.JComboBox memberCB;
    // End of variables declaration//GEN-END:variables

    private void reshow(){
        /*Object[] newRow;
        DefaultTableModel raidModel = (DefaultTableModel)raidTable.getModel();
        //DefaultTableModel caderModel = (DefaultTableModel)caderTable.getModel();
        Member currentRaider;
        while(caderModel.getRowCount()>0){
            caderModel.removeRow(0);
        }
        while(raidModel.getRowCount()>0){
            raidModel.removeRow(0);
        }
        
        int caderSize= raid.getMembersNames().length;
        for(int i=0;i<caderSize;i++){
            currentRaider = raid.getMemberBySKS(i);
            if(currentRaider.getState().equals(State.ABWESEND)){
                newRow = new Object[1];
                newRow[0]= currentRaider.getPlayer().getName();
                caderModel.addRow(newRow);
            }else{
                newRow= new Object[2];
                newRow[0]= currentRaider.getPlayer().getName();
                newRow[1]= currentRaider.getState().equals(State.ERSATZ);
                raidModel.addRow(newRow);
            }
        }*/
    }
}
